import streamlit as st
import pandas as pd
import numpy as np
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

st.set_page_config(page_title="Aktieanalys & investeringsf√∂rslag", layout="wide")

# ----------------------
# KONFIGURATION
# ----------------------

SHEET_URL = st.secrets["SHEET_URL"]
SHEET_NAME = "Blad1"
SETTINGS_SHEET_NAME = "Inst√§llningar"

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
client = gspread.authorize(credentials)

# ----------------------
# DATAHANTERING
# ----------------------

def skapa_koppling(blad_namn=SHEET_NAME):
    return client.open_by_url(SHEET_URL).worksheet(blad_namn)

def hamta_data():
    sheet = skapa_koppling()
    data = sheet.get_all_records()
    return pd.DataFrame(data)

def spara_data(df):
    sheet = skapa_koppling()
    # S√§kerst√§ll r√§tt kolumner
    godk√§nda_kolumner = [
        "Ticker", "Bolagsnamn", "Aktuell kurs", "Utest√•ende aktier",
        "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
        "Oms√§ttning idag", "Oms√§ttning om 1 √•r", "Oms√§ttning om 2 √•r",
        "P/S-snitt", "Riktkurs nu", "Riktkurs om 1 √•r", "Riktkurs om 2 √•r",
        "Uppsidepotential (%)", "Antal aktier"
    ]
    for kol in godk√§nda_kolumner:
        if kol not in df.columns:
            df[kol] = 0.0 if "kurs" in kol.lower() or "oms√§ttning" in kol.lower() or "p/s" in kol.lower() else ""

    df = df[[kol for kol in godk√§nda_kolumner if kol in df.columns]]
    df = df.fillna("").astype(str)
    sheet.clear()
    sheet.update([df.columns.tolist()] + df.values.tolist())

def konvertera_typer(df):
    numeriska = [
        "Aktuell kurs", "Utest√•ende aktier",
        "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
        "Oms√§ttning idag", "Oms√§ttning om 1 √•r", "Oms√§ttning om 2 √•r",
        "P/S-snitt", "Riktkurs nu", "Riktkurs om 1 √•r", "Riktkurs om 2 √•r",
        "Uppsidepotential (%)", "Antal aktier"
    ]
    for kol in numeriska:
        if kol in df.columns:
            df[kol] = pd.to_numeric(df[kol], errors="coerce").fillna(0.0)
    return df

def sakerstall_kolumner(df):
    godkanda_kolumner = [
        "Ticker", "Bolagsnamn", "Aktuell kurs", "Utest√•ende aktier",
        "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
        "Oms√§ttning idag", "Oms√§ttning om 1 √•r", "Oms√§ttning om 2 √•r",
        "P/S-snitt", "Riktkurs nu", "Riktkurs om 1 √•r", "Riktkurs om 2 √•r",
        "Uppsidepotential (%)", "Antal aktier"
    ]
    befintliga = df.columns.tolist()

    # Ta bort otill√•tna kolumner
    df = df[[col for col in befintliga if col in godkanda_kolumner]]

    # L√§gg till saknade kolumner
    for col in godkanda_kolumner:
        if col not in df.columns:
            df[col] = 0.0 if "kurs" in col.lower() or "oms√§ttning" in col.lower() or "p/s" in col.lower() else ""

    # Ordna kolumnordning
    df = df[godkanda_kolumner]
    return df

def las_inst√§llningar():
    try:
        sheet = skapa_koppling(SETTINGS_SHEET_NAME)
        data = sheet.get_all_values()
        df = pd.DataFrame(data[1:], columns=data[0])
        inst = dict(zip(df["Inst√§llning"], df["V√§rde"]))

        valutakurs = float(str(inst.get("Valutakurs", "0")).replace(",", "."))
        max_portf = float(str(inst.get("Max portf√∂ljandel", "100")).replace(",", "."))
        max_risk = float(str(inst.get("Max h√∂griskandel", "100")).replace(",", "."))

        return {
            "Valutakurs": valutakurs,
            "Max portf√∂ljandel": max_portf,
            "Max h√∂griskandel": max_risk,
            "Senast √§ndrad": inst.get("Senast √§ndrad", "")
        }
    except Exception as e:
        st.error(f"Fel vid l√§sning av inst√§llningar: {e}")
        return {"Valutakurs": 10.0, "Max portf√∂ljandel": 100, "Max h√∂griskandel": 100, "Senast √§ndrad": ""}

def visa_sidopanel(df, inst):
    st.sidebar.subheader("‚öôÔ∏è Inst√§llningar")

    ny_valutakurs = st.sidebar.number_input("Valutakurs (USD/SEK)", value=inst["Valutakurs"], step=0.01)
    ny_max_portf = st.sidebar.number_input("Max portf√∂ljandel (%)", value=inst["Max portf√∂ljandel"], step=0.01)
    ny_max_risk = st.sidebar.number_input("Max h√∂griskandel (%)", value=inst["Max h√∂griskandel"], step=0.01)

    if st.sidebar.button("üíæ Spara inst√§llningar"):
        try:
            sheet = skapa_koppling(SETTINGS_SHEET_NAME)
            sheet.update("B2", [[str(ny_valutakurs).replace(".", ",")]])
            sheet.update("B3", [[str(ny_max_portf).replace(".", ",")]])
            sheet.update("B4", [[str(ny_max_risk).replace(".", ",")]])
            sheet.update("B5", [[datetime.today().strftime("%Y-%m-%d")]])
            st.sidebar.success("Inst√§llningar uppdaterade.")
        except Exception as e:
            st.sidebar.error(f"Fel vid uppdatering: {e}")

def uppdatera_berakningar(df):
    df["P/S Q1"] = pd.to_numeric(df["P/S Q1"], errors="coerce").fillna(0)
    df["P/S Q2"] = pd.to_numeric(df["P/S Q2"], errors="coerce").fillna(0)
    df["P/S Q3"] = pd.to_numeric(df["P/S Q3"], errors="coerce").fillna(0)
    df["P/S Q4"] = pd.to_numeric(df["P/S Q4"], errors="coerce").fillna(0)

    df["P/S-snitt"] = df[["P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4"]].replace(0, np.nan).mean(axis=1).fillna(0)

    df["Oms√§ttning idag"] = pd.to_numeric(df["Oms√§ttning idag"], errors="coerce").fillna(0)
    df["Oms√§ttning om 1 √•r"] = pd.to_numeric(df["Oms√§ttning om 1 √•r"], errors="coerce").fillna(0)
    df["Oms√§ttning om 2 √•r"] = pd.to_numeric(df["Oms√§ttning om 2 √•r"], errors="coerce").fillna(0)
    df["Utest√•ende aktier"] = pd.to_numeric(df["Utest√•ende aktier"], errors="coerce").fillna(1)

    df["Riktkurs nu"] = round((df["Oms√§ttning idag"] / df["Utest√•ende aktier"]) * df["P/S-snitt"], 2)
    df["Riktkurs om 1 √•r"] = round((df["Oms√§ttning om 1 √•r"] / df["Utest√•ende aktier"]) * df["P/S-snitt"], 2)
    df["Riktkurs om 2 √•r"] = round((df["Oms√§ttning om 2 √•r"] / df["Utest√•ende aktier"]) * df["P/S-snitt"], 2)

    df["Aktuell kurs"] = pd.to_numeric(df["Aktuell kurs"], errors="coerce").fillna(0)
    df["Uppsidepotential (%)"] = round(((df["Riktkurs nu"] - df["Aktuell kurs"]) / df["Aktuell kurs"]) * 100, 2)
    return df

def visa_tabellrubrik(titel):
    st.markdown(f"<h4 style='margin-top:20px'>{titel}</h4>", unsafe_allow_html=True)

def visa_analysvy(df):
    st.subheader("üìä Aktieanalys")
    df = uppdatera_berakningar(df)
    st.dataframe(df, use_container_width=True)
    return df

def lagg_till_eller_uppdatera_bolag(df):
    st.subheader("‚ûï L√§gg till eller uppdatera bolag")
    existerande_tickers = df["Ticker"].dropna().unique().tolist()
    valt = st.selectbox("V√§lj bolag att uppdatera (eller l√§mna tomt f√∂r nytt)", [""] + existerande_tickers)

    data = df[df["Ticker"] == valt].iloc[0] if valt else {}

    inmatning = {}
    for kol in [
        "Ticker", "Bolagsnamn", "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
        "Oms√§ttning idag", "Oms√§ttning om 1 √•r", "Oms√§ttning om 2 √•r",
        "Utest√•ende aktier", "Aktuell kurs", "Antal aktier"
    ]:
        standard = data.get(kol, "")
        if kol in ["Bolagsnamn", "Ticker"]:
            inmatning[kol] = st.text_input(kol, value=str(standard))
        else:
            inmatning[kol] = st.number_input(kol, value=float(standard) if standard != "" else 0.0, step=1.0 if "Antal" in kol or "aktier" in kol else 0.01)

    if st.button("üíæ Spara bolag"):
        ny_rad = {k: inmatning[k] for k in inmatning}
        df = df[df["Ticker"] != ny_rad["Ticker"]]
        df = pd.concat([df, pd.DataFrame([ny_rad])], ignore_index=True)
        spara_data(df)
        st.success(f"{ny_rad['Ticker']} sparad.")
    return df

def visa_investeringsforslag(df, inst):
    st.subheader("üí° Investeringsf√∂rslag & ombalansering")

    kapital_sek = st.number_input("Tillg√§ngligt kapital (SEK)", value=10000.0, step=100.0)
    valutakurs = inst["Valutakurs"]
    max_portf = inst["Max portf√∂ljandel"]
    max_risk = inst["Max h√∂griskandel"]

    df = uppdatera_berakningar(df)
    df["V√§rde (SEK)"] = df["Antal aktier"] * df["Aktuell kurs"] * valutakurs
    total_varde = df["V√§rde (SEK)"].sum()
    df["Portf√∂ljandel (%)"] = round(df["V√§rde (SEK)"] / total_varde * 100, 2)

    h√∂grisk = df[(df["Oms√§ttning idag"] < 1000) & (df["Portf√∂ljandel (%)"] > max_risk)]
    minska = df[df["Portf√∂ljandel (%)"] > max_portf]
    √∂ka = df[(df["Riktkurs om 1 √•r"] > df["Aktuell kurs"]) & (df["Portf√∂ljandel (%)"] < max_portf)]

    if not minska.empty:
        st.markdown("üîª **Bolag att minska i:**")
        st.dataframe(minska[["Ticker", "Portf√∂ljandel (%)", "V√§rde (SEK)"]])

    if not √∂ka.empty:
        st.markdown("üîº **Bolag att √∂ka i:**")
        st.dataframe(√∂ka[["Ticker", "Potential", "Portf√∂ljandel (%)"]])

    if not h√∂grisk.empty:
        st.markdown("‚ö†Ô∏è **H√∂griskvarning:**")
        st.dataframe(h√∂grisk[["Ticker", "Oms√§ttning idag", "Portf√∂ljandel (%)"]])

    # Investeringsf√∂rslag
    df["Potential"] = df["Riktkurs om 1 √•r"] - df["Aktuell kurs"]
    df = df[df["Potential"] > 0].sort_values(by="Potential", ascending=False)

    if "f√∂rslag_index" not in st.session_state:
        st.session_state["f√∂rslag_index"] = 0

    i = st.session_state["f√∂rslag_index"]
    if i < len(df):
        rad = df.iloc[i]
        antal = int((kapital_sek / valutakurs) // rad["Aktuell kurs"])
        kostnad = round(antal * rad["Aktuell kurs"] * valutakurs, 2)
        st.markdown(
            f"K√∂p **{antal} st {rad['Ticker']} ({rad['Bolagsnamn']})** f√∂r ca **{kostnad} SEK**\n\n"
            f"Potential: {round(rad['Potential'],2)} USD ‚Üí Riktkurs om 1 √•r: {round(rad['Riktkurs om 1 √•r'],2)} USD"
        )
        if st.button("N√§sta f√∂rslag"):
            st.session_state["f√∂rslag_index"] += 1
    else:
        st.info("Inga fler f√∂rslag ‚Äì klicka om f√∂r att b√∂rja om.")

def visa_portfolj(df, valutakurs):
    st.subheader("üíº Portf√∂lj√∂versikt")
    df = df.copy()
    df["V√§rde (SEK)"] = df["Antal aktier"] * df["Aktuell kurs"] * valutakurs
    total = df["V√§rde (SEK)"].sum()
    df["Andel (%)"] = round(df["V√§rde (SEK)"] / total * 100, 2)
    st.dataframe(df[["Ticker", "Bolagsnamn", "Antal aktier", "Aktuell kurs", "V√§rde (SEK)", "Andel (%)"]])

def main():
    st.title("üìà Aktieanalys & investeringsf√∂rslag ‚Äì Manuell valutakurs och aktiekurs")

    df = hamta_data()
    df = s√§kerst√§ll_kolumner(df)
    df = konvertera_typer(df)

    inst√§llningar = las_inst√§llningar()
    skriv_sidopanel(inst√§llningar)

    meny = st.sidebar.radio("Navigering", ["Analys", "L√§gg till / uppdatera bolag", "Investeringsf√∂rslag", "Portf√∂lj"])

    if meny == "Analys":
        df = visa_analysvy(df)

    elif meny == "L√§gg till / uppdatera bolag":
        df = lagg_till_eller_uppdatera_bolag(df)

    elif meny == "Investeringsf√∂rslag":
        visa_investeringsforslag(df, inst√§llningar)

    elif meny == "Portf√∂lj":
        visa_portfolj(df, inst√§llningar["Valutakurs"])

    spara_data(df)

if __name__ == "__main__":
    main()
