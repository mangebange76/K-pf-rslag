import streamlit as st
import pandas as pd
import yfinance as yf
import gspread
import time
from google.oauth2.service_account import Credentials

st.set_page_config(page_title="Aktieanalys och investeringsf칬rslag", layout="wide")

SHEET_URL = st.secrets["SHEET_URL"]
SHEET_NAME = "Data"

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
client = gspread.authorize(credentials)

def skapa_koppling():
    return client.open_by_url(SHEET_URL).worksheet(SHEET_NAME)

def h칛mta_data():
    sheet = skapa_koppling()
    data = sheet.get_all_records()
    return pd.DataFrame(data)

def spara_data(df):
    sheet = skapa_koppling()
    sheet.clear()
    sheet.update([df.columns.values.tolist()] + df.astype(str).values.tolist())

def s칛kerst칛ll_kolumner(df):
    n칬dv칛ndiga_kolumner = [
        "Ticker", "Bolagsnamn", "Utest친ende aktier", "P/S", "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
        "P/S-snitt", "Oms칛ttning idag", "Oms칛ttning n칛sta 친r", "Oms칛ttning om 2 친r", "Oms칛ttning om 3 친r",
        "Riktkurs idag", "Riktkurs om 1 친r", "Riktkurs om 2 친r", "Riktkurs om 3 친r", "Antal aktier",
        "Valuta", "Aktuell kurs", "칀rlig utdelning", "CAGR 5 친r (%)", "Uppside (%)", "츿ger"
    ]
    for kolumn in n칬dv칛ndiga_kolumner:
        if kolumn not in df.columns:
            df[kolumn] = ""

    # Ta bort o칬nskade kolumner
    o칬nskade_kolumner = ["P/S idag", "Riktkurs 2026", "Riktkurs 2027", "Riktkurs 2028",
                         "Oms칛ttning om 4 친r", "Yahoo ticker", "Max andel", "P/S metod",
                         "Initierad", "Bolag", 21]
    df = df.drop(columns=[c for c in o칬nskade_kolumner if c in df.columns], errors="ignore")

    # Undvik dubletter
    df = df.loc[:, ~df.columns.duplicated()]
    return df

def h칛mta_data_fr친n_yahoo(ticker):
    try:
        aktie = yf.Ticker(ticker)
        info = aktie.info
        namn = info.get("longName", "")
        kurs = info.get("currentPrice", "")
        valuta = info.get("currency", "")
        utdelning = info.get("dividendRate", "")
        cagr_5친r = info.get("revenueGrowth", "")
        return {
            "Bolagsnamn": namn,
            "Aktuell kurs": kurs,
            "Valuta": valuta,
            "칀rlig utdelning": utdelning,
            "CAGR 5 친r (%)": round(cagr_5친r * 100, 2) if cagr_5친r else ""
        }
    except:
        return {}

def konvertera_typer(df):
    numeriska = [
        "P/S", "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4", "Oms칛ttning idag", "Oms칛ttning n칛sta 친r",
        "Oms칛ttning om 2 친r", "Oms칛ttning om 3 친r", "P/S-snitt", "Riktkurs idag", "Riktkurs om 1 친r",
        "Riktkurs om 2 친r", "Riktkurs om 3 친r", "Antal aktier", "Aktuell kurs", "칀rlig utdelning",
        "CAGR 5 친r (%)", "Uppside (%)", "Utest친ende aktier"
    ]
    for kolumn in numeriska:
        if kolumn in df.columns:
            df[kolumn] = pd.to_numeric(df[kolumn], errors="coerce")
    return df

def ber칛kna_allt(df):
    df = konvertera_typer(df)

    # Ber칛kna P/S-snitt
    df["P/S-snitt"] = df[["P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4"]].mean(axis=1)

    # Justera CAGR och ber칛kna framtida oms칛ttning
    justerad_cagr = df["CAGR 5 친r (%)"].copy()
    justerad_cagr[df["CAGR 5 친r (%)"] > 100] = 50
    justerad_cagr[df["CAGR 5 친r (%)"] < 0] = 2

    df["Oms칛ttning om 2 친r"] = df["Oms칛ttning n칛sta 친r"] * (1 + justerad_cagr / 100)
    df["Oms칛ttning om 3 친r"] = df["Oms칛ttning n칛sta 친r"] * ((1 + justerad_cagr / 100) ** 2)

    # Ber칛kna riktkurser
    df["Riktkurs idag"] = df["Oms칛ttning idag"] * df["P/S-snitt"] / df["Utest친ende aktier"]
    df["Riktkurs om 1 친r"] = df["Oms칛ttning n칛sta 친r"] * df["P/S-snitt"] / df["Utest친ende aktier"]
    df["Riktkurs om 2 친r"] = df["Oms칛ttning om 2 친r"] * df["P/S-snitt"] / df["Utest친ende aktier"]
    df["Riktkurs om 3 친r"] = df["Oms칛ttning om 3 친r"] * df["P/S-snitt"] / df["Utest친ende aktier"]

    return df

def formul칛r(df):
    st.subheader("L칛gg till eller uppdatera bolag")
    with st.form("nytt_bolag"):
        ticker = st.text_input("Ticker (obligatorisk)").upper()
        utest친ende_aktier = st.number_input("Utest친ende aktier", min_value=0.0, step=1.0)
        ps = st.number_input("P/S", min_value=0.0, step=0.1)
        ps_q1 = st.number_input("P/S Q1", min_value=0.0, step=0.1)
        ps_q2 = st.number_input("P/S Q2", min_value=0.0, step=0.1)
        ps_q3 = st.number_input("P/S Q3", min_value=0.0, step=0.1)
        ps_q4 = st.number_input("P/S Q4", min_value=0.0, step=0.1)
        oms칛ttning_idag = st.number_input("Oms칛ttning idag", min_value=0.0, step=1.0)
        oms칛ttning_n칛sta = st.number_input("Oms칛ttning n칛sta 친r", min_value=0.0, step=1.0)
        antal_aktier = st.number_input("Antal aktier du 칛ger", min_value=0.0, step=1.0)
        칛ger = st.selectbox("츿ger du aktien?", ["Ja", "Nej"])
        spara = st.form_submit_button("Spara")

    if spara and ticker:
        data = {
            "Ticker": ticker,
            "Utest친ende aktier": utest친ende_aktier,
            "P/S": ps,
            "P/S Q1": ps_q1,
            "P/S Q2": ps_q2,
            "P/S Q3": ps_q3,
            "P/S Q4": ps_q4,
            "Oms칛ttning idag": oms칛ttning_idag,
            "Oms칛ttning n칛sta 친r": oms칛ttning_n칛sta,
            "Antal aktier": antal_aktier,
            "츿ger": 칛ger
        }

        try:
            info = yf.Ticker(ticker).info
            data["Bolagsnamn"] = info.get("longName", "")
            data["Aktuell kurs"] = info.get("currentPrice", 0.0)
            data["Valuta"] = info.get("currency", "")
            data["칀rlig utdelning"] = info.get("dividendRate", 0.0)

            # CAGR h칛mtas om m칬jligt
            cagr = info.get("fiveYearAvgDividendYield")
            if cagr is not None:
                data["CAGR 5 친r (%)"] = round(cagr, 2)
            else:
                data["CAGR 5 친r (%)"] = 0.0

            data["Datak칛lla"] = "Yahoo Finance"
        except:
            data["Datak칛lla"] = "Manuell inmatning"

        # Uppdatera eller l칛gg till
        if ticker in df["Ticker"].values:
            df.loc[df["Ticker"] == ticker, data.keys()] = data.values()
        else:
            df = pd.concat([df, pd.DataFrame([data])], ignore_index=True)

        df = ber칛kna_allt(df)
        spara_data(df)
        st.success(f"{ticker} har sparats.")

    return df

def visa_portfolj(df):
    st.subheader("游늵 Portf칬lj칬versikt")

    df = df[df["츿ger"].str.lower() == "ja"]

    if df.empty:
        st.info("Du 칛ger inga aktier just nu.")
        return

    df["V칛rde (SEK)"] = df["Antal aktier"] * df["Aktuell kurs"]
    df["Utdelning totalt (SEK)"] = df["Antal aktier"] * df["칀rlig utdelning"]

    totalt_v칛rde = df["V칛rde (SEK)"].sum()
    total_utdelning = df["Utdelning totalt (SEK)"].sum()
    utdelning_per_m친nad = total_utdelning / 12

    st.metric("Totalt portf칬ljv칛rde (SEK)", f"{totalt_v칛rde:,.0f}")
    st.metric("Total 친rlig utdelning (SEK)", f"{total_utdelning:,.0f}")
    st.metric("Utdelning per m친nad (snitt)", f"{utdelning_per_m친nad:,.0f}")

    st.dataframe(df[["Ticker", "Bolagsnamn", "Antal aktier", "Aktuell kurs", "V칛rde (SEK)", "칀rlig utdelning", "Utdelning totalt (SEK)"]])

def analysvy(df):
    st.subheader("游댌 Analys")

    val = st.selectbox("V칛lj bolag att visa", df["Ticker"].unique())
    vald_rad = df[df["Ticker"] == val]

    if not vald_rad.empty:
        st.write("**Data f칬r valt bolag:**")
        st.dataframe(vald_rad)

    st.write("**Databasen i sin helhet:**")
    st.dataframe(df)

def investeringsf칬rslag(df):
    st.subheader("游눠 Investeringsf칬rslag")

    riktkursval = st.selectbox("Filtrera efter riktkurs", ["Riktkurs idag", "Riktkurs om 1 친r", "Riktkurs om 2 친r", "Riktkurs om 3 친r"])
    df = df.copy()
    df = df[df["Aktuell kurs"] > 0]
    df["Uppside (%)"] = ((df[riktkursval] - df["Aktuell kurs"]) / df["Aktuell kurs"]) * 100
    df = df.sort_values("Uppside (%)", ascending=False).reset_index(drop=True)

    if df.empty:
        st.info("Inga bolag matchar.")
        return

    index = st.number_input("Visa bolag nummer", min_value=0, max_value=len(df)-1, step=1)

    rad = df.iloc[index]
    st.markdown(f"### {rad['Bolagsnamn']} ({rad['Ticker']})")
    st.write(f"Aktuell kurs: {rad['Aktuell kurs']:.2f} {rad['Valuta']}")
    st.write(f"{riktkursval}: {rad[riktkursval]:.2f} {rad['Valuta']}")
    st.write(f"Uppside: {rad['Uppside (%)']:.1f} %")

    tillg칛ngligt_belopp = st.number_input("Tillg칛ngligt belopp (SEK)", min_value=0.0, step=100.0)
    if tillg칛ngligt_belopp > 0:
        k칬pbara = tillg칛ngligt_belopp // rad["Aktuell kurs"]
        redan_칛ger = rad["Antal aktier"]
        framtida_antal = redan_칛ger + k칬pbara
        nuvarande_andel = (rad["Antal aktier"] * rad["Aktuell kurs"]) / df["Aktuell kurs"].mul(df["Antal aktier"]).sum() * 100
        framtida_andel = (framtida_antal * rad["Aktuell kurs"]) / df["Aktuell kurs"].mul(df["Antal aktier"]).sum() * 100

        st.write(f"Du kan k칬pa **{int(k칬pbara)}** aktier.")
        st.write(f"Du 칛ger redan **{int(redan_칛ger)}** aktier.")
        st.write(f"Nuvarande portf칬ljandel: **{nuvarande_andel:.1f}%**")
        st.write(f"Portf칬ljandel efter k칬p: **{framtida_andel:.1f}%**")

def main():
    st.title("游늳 Aktieanalys och investeringsf칬rslag")
    df = h칛mta_data()
    df = s칛kerst칛ll_kolumner(df)
    df = konvertera_typer(df)
    df = ber칛kna_allt(df)

    menyval = st.sidebar.radio("Meny", [
        "L칛gg till / uppdatera bolag",
        "Analys",
        "Portf칬lj",
        "Investeringsf칬rslag",
        "Massuppdatera alla"
    ])

    if menyval == "L칛gg till / uppdatera bolag":
        formul칛r(df)

    elif menyval == "Analys":
        analysvy(df)

    elif menyval == "Portf칬lj":
        visa_portfolj(df)

    elif menyval == "Investeringsf칬rslag":
        investeringsf칬rslag(df)

    elif menyval == "Massuppdatera alla":
        if st.button("Starta massuppdatering"):
            df = massuppdatera_alla(df)
            spara_data(df)
            st.success("Massuppdatering klar.")

if __name__ == "__main__":
    main()
