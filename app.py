# app.py (del 1/2)
import streamlit as st
import pandas as pd

# â€”â€” VÃ¥ra moduler
from sheets_utils import (
    hamta_data, spara_data, hamta_valutakurs,
    skapa_snapshot_om_saknas, now_stamp
)
from calc_and_cache import uppdatera_berakningar
from views import (
    hamta_valutakurser_sidebar, massuppdatera,
    lagg_till_eller_uppdatera, analysvy,
    visa_investeringsforslag, visa_hamtlogg_panel, spara_logg_till_sheets
)

st.set_page_config(page_title="Aktieanalys och investeringsfÃ¶rslag", layout="wide")

# â€”â€” Kolumnschema (inkl kÃ¤llor, datumtaggar & auto-tidstÃ¤mpel)
FINAL_COLS = [
    "Ticker", "Bolagsnamn", "UtestÃ¥ende aktier",
    "P/S", "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
    "P/S Q1 datum", "P/S Q2 datum", "P/S Q3 datum", "P/S Q4 datum",
    "OmsÃ¤ttning idag", "OmsÃ¤ttning nÃ¤sta Ã¥r", "OmsÃ¤ttning om 2 Ã¥r", "OmsÃ¤ttning om 3 Ã¥r",
    "Riktkurs idag", "Riktkurs om 1 Ã¥r", "Riktkurs om 2 Ã¥r", "Riktkurs om 3 Ã¥r",
    "Antal aktier", "Valuta", "Ã…rlig utdelning", "Aktuell kurs",
    "CAGR 5 Ã¥r (%)", "P/S-snitt",
    "Senast manuellt uppdaterad", "Senast auto uppdaterad",
    "TS P/S", "TS OmsÃ¤ttning", "TS UtestÃ¥ende aktier",
    "KÃ¤lla Aktuell kurs", "KÃ¤lla UtestÃ¥ende aktier",
    "KÃ¤lla P/S", "KÃ¤lla P/S Q1", "KÃ¤lla P/S Q2", "KÃ¤lla P/S Q3", "KÃ¤lla P/S Q4"
]

NUM_COLS = {
    "UtestÃ¥ende aktier","P/S","P/S Q1","P/S Q2","P/S Q3","P/S Q4",
    "OmsÃ¤ttning idag","OmsÃ¤ttning nÃ¤sta Ã¥r","OmsÃ¤ttning om 2 Ã¥r","OmsÃ¤ttning om 3 Ã¥r",
    "Riktkurs idag","Riktkurs om 1 Ã¥r","Riktkurs om 2 Ã¥r","Riktkurs om 3 Ã¥r",
    "Antal aktier","Ã…rlig utdelning","Aktuell kurs","CAGR 5 Ã¥r (%)","P/S-snitt"
}

def sÃ¤kerstÃ¤ll_kolumner(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    for c in FINAL_COLS:
        if c not in df.columns:
            if c in NUM_COLS:
                df[c] = 0.0
            else:
                df[c] = ""
    # typkonvertering
    for c in df.columns:
        if c in NUM_COLS:
            df[c] = pd.to_numeric(df[c], errors="coerce").fillna(0.0)
        else:
            df[c] = df[c].astype(str)
    return df

def migrera_gamla_riktkurskolumner(df: pd.DataFrame) -> pd.DataFrame:
    mapping = {
        "Riktkurs 2026": "Riktkurs om 1 Ã¥r",
        "Riktkurs 2027": "Riktkurs om 2 Ã¥r",
        "Riktkurs 2028": "Riktkurs om 3 Ã¥r",
        "Riktkurs om idag": "Riktkurs idag",
    }
    for old, new in mapping.items():
        if old in df.columns:
            if new not in df.columns:
                df[new] = 0.0
            new_vals = pd.to_numeric(df[new], errors="coerce").fillna(0.0)
            old_vals = pd.to_numeric(df[old], errors="coerce").fillna(0.0)
            mask = (new_vals == 0.0) & (old_vals > 0.0)
            df.loc[mask, new] = old_vals[mask]
            df = df.drop(columns=[old])
    return df

# â€”â€” PortfÃ¶ljvy (lÃ¤tt vikt, kan ligga hÃ¤r)
def visa_portfolj(df: pd.DataFrame, user_rates: dict) -> None:
    st.header("ğŸ“¦ Min portfÃ¶lj")
    port = df[df["Antal aktier"] > 0].copy()
    if port.empty:
        st.info("Du Ã¤ger inga aktier.")
        return
    port["VÃ¤xelkurs"] = port["Valuta"].apply(lambda v: hamta_valutakurserna(v, user_rates))
    port["VÃ¤rde (SEK)"] = port["Antal aktier"] * port["Aktuell kurs"] * port["VÃ¤xelkurs"]
    total_vÃ¤rde = float(port["VÃ¤rde (SEK)"].sum())
    port["Andel (%)"] = (port["VÃ¤rde (SEK)"] / total_vÃ¤rde * 100.0).round(2)
    port["Total Ã¥rlig utdelning (SEK)"] = port["Antal aktier"] * port["Ã…rlig utdelning"] * port["VÃ¤xelkurs"]
    tot_utd = float(port["Total Ã¥rlig utdelning (SEK)"].sum())

    st.markdown(f"**Totalt portfÃ¶ljvÃ¤rde:** {round(total_vÃ¤rde,2)} SEK")
    st.markdown(f"**Total kommande utdelning:** {round(tot_utd,2)} SEK")
    st.markdown(f"**UngefÃ¤rlig mÃ¥nadsutdelning:** {round(tot_utd/12.0,2)} SEK")

    st.dataframe(
        port[["Ticker","Bolagsnamn","Antal aktier","Aktuell kurs","Valuta","VÃ¤rde (SEK)","Andel (%)","Ã…rlig utdelning","Total Ã¥rlig utdelning (SEK)"]],
        use_container_width=True
    )

def hamta_valutakurserna(v: str, user_rates: dict) -> float:
    try:
        return hamta_valutakurs(v, user_rates)
    except Exception:
        return 1.0

# â€”â€” Main
def main():
    st.title("ğŸ“Š Aktieanalys och investeringsfÃ¶rslag")

    # Sidopanel: valutakurser och hÃ¤mtlogg
    user_rates = hamta_valutakurser_sidebar()
    with st.sidebar:
        visa_hamtlogg_panel()
        if st.button("ğŸ§¾ Spara logg till Sheets"):
            spara_logg_till_sheets()

    # LÃ¤s data frÃ¥n Sheets
    df = hamta_data()
    if df.empty:
        df = pd.DataFrame({c: [] for c in FINAL_COLS})
        spara_data(df)

    # SÃ¤kerstÃ¤ll schema & migrera ev. gamla kolumner
    df = sÃ¤kerstÃ¤ll_kolumner(df)
    df = migrera_gamla_riktkurskolumner(df)

    # Skapa snapshot vid start (om saknas)
    _ok, _msg = skapa_snapshot_om_saknas(df)

    # Global massuppdateringsknapp i sidopanelen
    df = massuppdatera(df, key_prefix="global", user_rates=user_rates)

    # Meny
    meny = st.sidebar.radio("ğŸ“Œ VÃ¤lj vy", ["Analys","LÃ¤gg till / uppdatera bolag","InvesteringsfÃ¶rslag","PortfÃ¶lj"])
    if meny == "Analys":
        analysvy(df, user_rates)
    elif meny == "LÃ¤gg till / uppdatera bolag":
        df = lagg_till_eller_uppdatera(df, user_rates)
    elif meny == "InvesteringsfÃ¶rslag":
        df = uppdatera_berakningar(df, user_rates)
        visa_investeringsforslag(df, user_rates)
    elif meny == "PortfÃ¶lj":
        df = uppdatera_berakningar(df, user_rates)
        visa_portfolj(df, user_rates)

if __name__ == "__main__":
    main()

# app.py (del 2/2)
# (Den hÃ¤r filen innehÃ¥ller hela appen; del 2 finns bara fÃ¶r att matcha din Ã¶nskan om uppdelning.
#  Det finns ingen extra kod hÃ¤r â€“ del 1 innehÃ¥ller allt som kÃ¶rs.)
