# ---------------------------------------
# Aktieanalys & investeringsf√∂rslag ‚Äì FULLST√ÑNDIG VERSION
# Del 1: Importer, autentisering, databaskoppling, hj√§lpmetoder
# ---------------------------------------

import streamlit as st
import pandas as pd
import numpy as np
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

st.set_page_config(page_title="üìä Aktieanalys och investeringsf√∂rslag", layout="wide")

# ---------------------------------------
# KONFIGURATION ‚Äì GOOGLE SHEETS
# ---------------------------------------

SHEET_URL = st.secrets["SHEET_URL"]
SHEET_NAME = "Blad1"
SETTINGS_SHEET = "Inst√§llningar"

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
client = gspread.authorize(credentials)

# ---------------------------------------
# DATAHANTERING ‚Äì LADDA OCH SPARA
# ---------------------------------------

def skapa_koppling(sheetname):
    return client.open_by_url(SHEET_URL).worksheet(sheetname)

def hamta_data():
    df = pd.DataFrame(skapa_koppling(SHEET_NAME).get_all_records())
    return konvertera_typer(s√§kerst√§ll_kolumner(df))

def spara_data(df):
    sheet = skapa_koppling(SHEET_NAME)
    sheet.clear()
    sheet.update([df.columns.tolist()] + df.astype(str).values.tolist())

def konvertera_typer(df):
    numeriska = [
        "Oms√§ttning idag", "Oms√§ttning n√§sta √•r", "Oms√§ttning om 2 √•r",
        "Utest√•ende aktier", "P/S", "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
        "Aktuell kurs", "Antal aktier", "P/S-snitt", "Riktkurs nu", "Riktkurs om 1 √•r", "Riktkurs om 2 √•r"
    ]
    for kol in numeriska:
        if kol in df.columns:
            df[kol] = pd.to_numeric(df[kol], errors="coerce").fillna(0.0)
    return df

def s√§kerst√§ll_kolumner(df):
    n√∂dv√§ndiga = [
        "Ticker", "Bolagsnamn", "Aktuell kurs", "Utest√•ende aktier", "P/S",
        "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
        "Oms√§ttning idag", "Oms√§ttning n√§sta √•r", "Oms√§ttning om 2 √•r",
        "P/S-snitt", "Riktkurs nu", "Riktkurs om 1 √•r", "Riktkurs om 2 √•r", "Antal aktier"
    ]
    for kol in n√∂dv√§ndiga:
        if kol not in df.columns:
            df[kol] = 0.0 if "kurs" in kol.lower() or "oms√§ttning" in kol.lower() or "p/s" in kol.lower() else ""
    return df

# ---------------------------------------
# INST√ÑLLNINGAR ‚Äì L√§s & spara fr√•n bladet "Inst√§llningar"
# ---------------------------------------

def skapa_inst√§llningsblad():
    try:
        sheet = skapa_koppling(SETTINGS_SHEET)
    except gspread.exceptions.WorksheetNotFound:
        ss = client.open_by_url(SHEET_URL)
        sheet = ss.add_worksheet(title=SETTINGS_SHEET, rows=10, cols=4)
        sheet.append_row(["Namn", "V√§rde", "Senast √§ndrad"])
        sheet.append_row(["Valutakurs", "10.0", datetime.today().strftime("%Y-%m-%d")])
        sheet.append_row(["Max portf√∂ljandel (%)", "20", datetime.today().strftime("%Y-%m-%d")])
        sheet.append_row(["Max h√∂griskandel (%)", "2", datetime.today().strftime("%Y-%m-%d")])
    return skapa_koppling(SETTINGS_SHEET)

def load_settings():
    sheet = skapa_inst√§llningsblad()
    data = sheet.get_all_records()
    return {rad["Namn"]: float(rad["V√§rde"]) for rad in data}

def save_settings(settings_dict):
    sheet = skapa_inst√§llningsblad()
    data = [["Namn", "V√§rde", "Senast √§ndrad"]]
    for key, value in settings_dict.items():
        data.append([key, str(value), datetime.today().strftime("%Y-%m-%d")])
    sheet.clear()
    sheet.update(data)

def visa_sidopanel():
    st.sidebar.title("‚öôÔ∏è Inst√§llningar")
    inst = load_settings()
    valutakurs = st.sidebar.number_input("Valutakurs (USD ‚Üí SEK)", value=inst.get("Valutakurs", 10.0), step=0.1)
    max_andel = st.sidebar.number_input("Max portf√∂ljandel (%)", value=inst.get("Max portf√∂ljandel (%)", 20.0), step=1.0)
    max_risk = st.sidebar.number_input("Max h√∂griskandel (%)", value=inst.get("Max h√∂griskandel (%)", 2.0), step=0.5)

    if st.sidebar.button("üíæ Spara inst√§llningar"):
        save_settings({
            "Valutakurs": valutakurs,
            "Max portf√∂ljandel (%)": max_andel,
            "Max h√∂griskandel (%)": max_risk
        })
        st.sidebar.success("Inst√§llningar sparade!")

    return valutakurs, max_andel, max_risk

# ---------------------------------------
# BER√ÑKNINGAR & DATAINMATNING
# ---------------------------------------

def s√§kerst√§ll_kolumner(df):
    kolumner = [
        "Ticker", "Bolagsnamn", "Aktuell kurs", "Utest√•ende aktier", "Antal aktier",
        "P/S", "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4", "P/S-snitt",
        "Oms√§ttning idag", "Oms√§ttning n√§sta √•r", "Oms√§ttning om 2 √•r",
        "Riktkurs nu", "Riktkurs om 1 √•r", "Riktkurs om 2 √•r"
    ]
    for kol in kolumner:
        if kol not in df.columns:
            df[kol] = 0.0 if "kurs" in kol.lower() or "oms√§ttning" in kol.lower() or "p/s" in kol.lower() else ""
    return df

def konvertera_typer(df):
    kolumner = [
        "Oms√§ttning idag", "Oms√§ttning n√§sta √•r", "Oms√§ttning om 2 √•r",
        "Utest√•ende aktier", "P/S", "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
        "Aktuell kurs", "Antal aktier"
    ]
    for kol in kolumner:
        if kol in df.columns:
            df[kol] = pd.to_numeric(df[kol], errors="coerce").fillna(0.0)
    return df

def uppdatera_berakningar(df):
    for i, rad in df.iterrows():
        ps = [rad["P/S Q1"], rad["P/S Q2"], rad["P/S Q3"], rad["P/S Q4"]]
        ps = [x for x in ps if x > 0]
        ps_snitt = round(np.mean(ps), 2) if ps else 0
        df.at[i, "P/S-snitt"] = ps_snitt

        if rad["Utest√•ende aktier"] > 0:
            df.at[i, "Riktkurs nu"] = round((rad["Oms√§ttning idag"] * ps_snitt) / rad["Utest√•ende aktier"], 2)
            df.at[i, "Riktkurs om 1 √•r"] = round((rad["Oms√§ttning n√§sta √•r"] * ps_snitt) / rad["Utest√•ende aktier"], 2)
            df.at[i, "Riktkurs om 2 √•r"] = round((rad["Oms√§ttning om 2 √•r"] * ps_snitt) / rad["Utest√•ende aktier"], 2)
    return df

def lagg_till_eller_uppdatera(df):
    st.subheader("‚ûï L√§gg till / uppdatera bolag")
    tickers = df["Ticker"].tolist()
    valt = st.selectbox("V√§lj existerande bolag att uppdatera (eller l√§mna tom f√∂r nytt)", [""] + tickers)

    if valt:
        befintlig = df[df["Ticker"] == valt].iloc[0]
    else:
        befintlig = {}

    with st.form("form"):
        ticker = st.text_input("Ticker", value=befintlig.get("Ticker", "")).upper()
        namn = st.text_input("Bolagsnamn", value=befintlig.get("Bolagsnamn", ""))
        kurs = st.number_input("Aktuell kurs (USD)", value=float(befintlig.get("Aktuell kurs", 0.0)))
        aktier = st.number_input("Utest√•ende aktier (miljoner)", value=float(befintlig.get("Utest√•ende aktier", 0.0)))
        antal_aktier = st.number_input("Antal aktier du √§ger", value=float(befintlig.get("Antal aktier", 0.0)))

        ps_idag = st.number_input("P/S idag", value=float(befintlig.get("P/S", 0.0)))
        ps1 = st.number_input("P/S Q1", value=float(befintlig.get("P/S Q1", 0.0)))
        ps2 = st.number_input("P/S Q2", value=float(befintlig.get("P/S Q2", 0.0)))
        ps3 = st.number_input("P/S Q3", value=float(befintlig.get("P/S Q3", 0.0)))
        ps4 = st.number_input("P/S Q4", value=float(befintlig.get("P/S Q4", 0.0)))

        oms_idag = st.number_input("Oms√§ttning idag (miljoner USD)", value=float(befintlig.get("Oms√§ttning idag", 0.0)))
        oms_1 = st.number_input("Oms√§ttning n√§sta √•r", value=float(befintlig.get("Oms√§ttning n√§sta √•r", 0.0)))
        oms_2 = st.number_input("Oms√§ttning om 2 √•r", value=float(befintlig.get("Oms√§ttning om 2 √•r", 0.0)))

        sparaknapp = st.form_submit_button("üíæ Spara")

    if sparaknapp and ticker:
        ny_rad = {
            "Ticker": ticker, "Bolagsnamn": namn, "Aktuell kurs": kurs,
            "Utest√•ende aktier": aktier, "Antal aktier": antal_aktier,
            "P/S": ps_idag, "P/S Q1": ps1, "P/S Q2": ps2, "P/S Q3": ps3, "P/S Q4": ps4,
            "Oms√§ttning idag": oms_idag, "Oms√§ttning n√§sta √•r": oms_1, "Oms√§ttning om 2 √•r": oms_2
        }

        if ticker in df["Ticker"].values:
            df.loc[df["Ticker"] == ticker, ny_rad.keys()] = ny_rad.values()
            st.success(f"{ticker} uppdaterat.")
        else:
            df = pd.concat([df, pd.DataFrame([ny_rad])], ignore_index=True)
            st.success(f"{ticker} tillagt.")
    return df

# ---------------------------------------
# INVESTERINGSF√ñRSLAG & PORTF√ñLJ
# ---------------------------------------

def visa_investeringsforslag(df, valutakurs, max_andel, max_hogrisk):
    st.subheader("üí° Investeringsf√∂rslag")
    kapital_sek = st.number_input("Tillg√§ngligt kapital (SEK)", value=10000.0, step=500.0)
    st.markdown("---")

    df = df[df["Riktkurs om 1 √•r"] > df["Aktuell kurs"]].copy()
    df["Potential"] = df["Riktkurs om 1 √•r"] - df["Aktuell kurs"]
    df = df.sort_values(by="Potential", ascending=False).reset_index(drop=True)

    if valutakurs == 0:
        st.warning("Valutakursen f√•r inte vara 0.")
        return

    df["V√§rde (SEK)"] = df["Antal aktier"] * df["Aktuell kurs"] * valutakurs
    totalt_portfoljvarde = df["V√§rde (SEK)"].sum()
    df["Portf√∂ljandel (%)"] = round(df["V√§rde (SEK)"] / totalt_portfoljvarde * 100, 2)
    df["H√∂grisk"] = (df["Oms√§ttning idag"] < 1000) & (df["Portf√∂ljandel (%)"] >= max_hogrisk)

    if "visat_index" not in st.session_state:
        st.session_state.visat_index = 0

    # Visning av investeringsf√∂rslag ett i taget
    for i in range(st.session_state.visat_index, len(df)):
        rad = df.iloc[i]
        antal = int((kapital_sek / valutakurs) // rad["Aktuell kurs"])
        if rad["Aktuell kurs"] <= 0:
            continue

        st.markdown(f"### F√∂rslag {i+1}: {rad['Ticker']} ‚Äì {rad['Bolagsnamn']}")
        st.write(f"**Aktuell kurs**: {rad['Aktuell kurs']} USD")
        st.write(f"**Riktkurs om 1 √•r**: {rad['Riktkurs om 1 √•r']} USD")
        st.write(f"**Uppsidepotential**: {round(rad['Potential'], 2)} USD")
        st.write(f"**Rekommenderat antal aktier**: {antal}")
        st.write(f"**Kostnad i SEK**: {round(antal * rad['Aktuell kurs'] * valutakurs, 2)}")

        if rad["Portf√∂ljandel (%)"] > max_andel:
            st.warning(f"‚ö†Ô∏è Portf√∂ljandelen √§r redan {rad['Portf√∂ljandel (%)']}% vilket √∂verstiger maxgr√§nsen p√• {max_andel}%.")

        if rad["H√∂grisk"]:
            st.error("‚ö†Ô∏è H√∂grisk: Bolaget har oms√§ttning < 1 miljard USD och √∂verstiger max till√•ten andel f√∂r h√∂griskbolag.")

        st.session_state.visat_index += 1
        if st.button("N√§sta f√∂rslag"):
            st.experimental_rerun()
        break
    else:
        st.info("Inga fler f√∂rslag att visa.")

    st.markdown("---")
    visa_ombalanseringstabeller(df, max_andel, max_hogrisk)

def visa_ombalanseringstabeller(df, max_andel, max_hogrisk):
    st.subheader("‚öñÔ∏è Ombalanseringsf√∂rslag")

    df["V√§rde (SEK)"] = df["Antal aktier"] * df["Aktuell kurs"] * st.session_state.valutakurs
    totalt = df["V√§rde (SEK)"].sum()
    df["Portf√∂ljandel (%)"] = round(df["V√§rde (SEK)"] / totalt * 100, 2)

    minskas = df[df["Portf√∂ljandel (%)"] > max_andel]
    √∂kas = df[(df["Potential"] > 0) & (df["Portf√∂ljandel (%)"] < max_andel)]
    h√∂grisk = df[(df["Oms√§ttning idag"] < 1000) & (df["Portf√∂ljandel (%)"] > max_hogrisk)]

    if not minskas.empty:
        st.markdown("#### üìâ Bolag att minska i")
        st.dataframe(minskas[["Ticker", "Bolagsnamn", "Portf√∂ljandel (%)"]], use_container_width=True)

    if not √∂kas.empty:
        st.markdown("#### üìà Bolag att √∂ka i")
        st.dataframe(√∂kas[["Ticker", "Bolagsnamn", "Potential", "Portf√∂ljandel (%)"]], use_container_width=True)

    if not h√∂grisk.empty:
        st.markdown("#### ‚ö†Ô∏è H√∂griskvarningar")
        st.dataframe(h√∂grisk[["Ticker", "Bolagsnamn", "Oms√§ttning idag", "Portf√∂ljandel (%)"]], use_container_width=True)

def visa_portfolj(df, valutakurs):
    st.subheader("üì¶ Min portf√∂lj")
    df = df[df["Antal aktier"] > 0].copy()
    if df.empty:
        st.info("Du √§ger inga aktier.")
        return

    df["V√§rde (SEK)"] = df["Antal aktier"] * df["Aktuell kurs"] * valutakurs
    df["Andel (%)"] = round(df["V√§rde (SEK)"] / df["V√§rde (SEK)"].sum() * 100, 2)
    st.dataframe(df[["Ticker", "Bolagsnamn", "Antal aktier", "Aktuell kurs", "V√§rde (SEK)", "Andel (%)"]], use_container_width=True)

# ---------------------------------------
# INST√ÑLLNINGAR (inst√§llningsblad + sidopanel)
# ---------------------------------------

INST√ÑLLNINGAR_SHEET = "Inst√§llningar"

def skapa_inst√§llningsblad():
    try:
        blad = client.open_by_url(SHEET_URL)
        if INST√ÑLLNINGAR_SHEET not in [ws.title for ws in blad.worksheets()]:
            blad.add_worksheet(title=INST√ÑLLNINGAR_SHEET, rows=10, cols=2)
            inst_sheet = blad.worksheet(INST√ÑLLNINGAR_SHEET)
            inst_sheet.update("A1:B4", [
                ["Inst√§llning", "V√§rde"],
                ["Valutakurs", "10.0"],
                ["Max portf√∂ljandel (%)", "20.0"],
                ["Max h√∂griskandel (%)", "2.0"],
            ])
            inst_sheet.update("C1", "Senast √§ndrad")
    except Exception as e:
        st.error(f"Fel vid skapande av inst√§llningsblad: {e}")

def hamta_inst√§llningar():
    try:
        blad = client.open_by_url(SHEET_URL).worksheet(INST√ÑLLNINGAR_SHEET)
        data = blad.get_all_records()
        inst = {rad["Inst√§llning"]: float(rad["V√§rde"]) for rad in data}
        return inst
    except Exception as e:
        st.warning("Inst√§llningar saknas eller kunde inte h√§mtas.")
        return {"Valutakurs": 10.0, "Max portf√∂ljandel (%)": 20.0, "Max h√∂griskandel (%)": 2.0}

def spara_inst√§llningar(valutakurs, max_andel, max_hogrisk):
    try:
        blad = client.open_by_url(SHEET_URL).worksheet(INST√ÑLLNINGAR_SHEET)
        blad.update("A2:B4", [
            ["Valutakurs", valutakurs],
            ["Max portf√∂ljandel (%)", max_andel],
            ["Max h√∂griskandel (%)", max_hogrisk]
        ])
        blad.update("C2", pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S"))
    except Exception as e:
        st.error(f"Fel vid uppdatering av inst√§llningar: {e}")

def visa_inst√§llningar_sido():
    st.sidebar.markdown("### ‚öôÔ∏è Inst√§llningar")
    inst = hamta_inst√§llningar()

    valutakurs = st.sidebar.number_input("Valutakurs (USD ‚Üí SEK)", value=inst["Valutakurs"], step=0.1)
    max_andel = st.sidebar.number_input("Max portf√∂ljandel (%)", value=inst["Max portf√∂ljandel (%)"], step=1.0)
    max_hogrisk = st.sidebar.number_input("Max h√∂griskandel (%)", value=inst["Max h√∂griskandel (%)"], step=0.5)

    if st.sidebar.button("üíæ Spara inst√§llningar"):
        spara_inst√§llningar(valutakurs, max_andel, max_hogrisk)
        st.sidebar.success("Inst√§llningar sparade!")

    return valutakurs, max_andel, max_hogrisk

# ---------------------------------------
# MAIN-FUNKTION
# ---------------------------------------

def main():
    st.set_page_config(page_title="üìä Aktieanalys och investeringsf√∂rslag", layout="wide")
    skapa_inst√§llningsblad()

    df = hamta_data()
    df = s√§kerst√§ll_kolumner(df)
    df = konvertera_typer(df)
    df = uppdatera_berakningar(df)

    valutakurs, max_andel, max_hogrisk = visa_inst√§llningar_sido()

    meny = st.sidebar.radio("üìå V√§lj vy", ["Analys", "L√§gg till / uppdatera bolag", "Investeringsf√∂rslag", "Portf√∂lj"])

    if meny == "Analys":
        st.subheader("üìà Aktieanalys")
        st.dataframe(df, use_container_width=True)

    elif meny == "L√§gg till / uppdatera bolag":
        df = lagg_till_eller_uppdatera(df)
        df = uppdatera_berakningar(df)
        spara_data(df)

    elif meny == "Investeringsf√∂rslag":
        visa_investeringsforslag(df, valutakurs, max_andel, max_hogrisk)

    elif meny == "Portf√∂lj":
        visa_portfolj(df, valutakurs)

if __name__ == "__main__":
    main()
