import streamlit as st
import pandas as pd
import numpy as np
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

st.set_page_config(page_title="Aktieanalys och investeringsf√∂rslag", layout="wide")

# ---------------------------------------
# KONFIGURATION OCH GOOGLE SHEETS-KOPPLING
# ---------------------------------------

SHEET_URL = st.secrets["SHEET_URL"]
SHEET_NAME = "Blad1"
SETTINGS_SHEET_NAME = "Inst√§llningar"

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
client = gspread.authorize(credentials)

def skapa_koppling(blad_namn=SHEET_NAME):
    return client.open_by_url(SHEET_URL).worksheet(blad_namn)

def hamta_data():
    sheet = skapa_koppling()
    data = sheet.get_all_records()
    return pd.DataFrame(data)

def spara_data(df):
    sheet = skapa_koppling()
    sheet.clear()
    sheet.update([df.columns.values.tolist()] + df.astype(str).values.tolist())

def konvertera_typer(df):
    kolumner = [
        "Oms√§ttning idag", "Oms√§ttning n√§sta √•r", "Oms√§ttning om 2 √•r",
        "Utest√•ende aktier", "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
        "Aktuell kurs", "Antal aktier"
    ]
    for kol in kolumner:
        if kol in df.columns:
            df[kol] = pd.to_numeric(df[kol], errors="coerce").fillna(0.0)
    return df

def s√§kerst√§ll_kolumner(df):
    n√∂dv√§ndiga = [
        "Ticker", "Bolagsnamn", "Aktuell kurs", "Utest√•ende aktier",
        "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
        "Oms√§ttning idag", "Oms√§ttning n√§sta √•r", "Oms√§ttning om 2 √•r",
        "P/S-snitt", "Riktkurs nu", "Riktkurs om 1 √•r", "Riktkurs om 2 √•r",
        "Antal aktier"
    ]
    # Om kolumn saknas l√§gg till med default v√§rde
    for kol in n√∂dv√§ndiga:
        if kol not in df.columns:
            df[kol] = 0.0 if kol not in ["Ticker", "Bolagsnamn"] else ""
    # Ta bort kolumner som inte finns med i n√∂dv√§ndiga
    df = df[[kol for kol in df.columns if kol in n√∂dv√§ndiga] + [kol for kol in n√∂dv√§ndiga if kol not in df.columns]]
    return df

# ---------------------------------------
# BER√ÑKNINGAR OCH UPPDATERING AV DATAFRAME
# ---------------------------------------

def uppdatera_berakningar(df):
    for i, row in df.iterrows():
        ps_values = [row.get("P/S Q1", 0), row.get("P/S Q2", 0), row.get("P/S Q3", 0), row.get("P/S Q4", 0)]
        ps_values = [ps for ps in ps_values if ps > 0]
        ps_snitt = round(np.mean(ps_values), 2) if ps_values else 0.0
        df.at[i, "P/S-snitt"] = ps_snitt

        if row.get("Utest√•ende aktier", 0) > 0 and ps_snitt > 0:
            df.at[i, "Riktkurs nu"] = round((row.get("Oms√§ttning idag", 0) * ps_snitt) / row["Utest√•ende aktier"], 2)
            df.at[i, "Riktkurs om 1 √•r"] = round((row.get("Oms√§ttning n√§sta √•r", 0) * ps_snitt) / row["Utest√•ende aktier"], 2)
            df.at[i, "Riktkurs om 2 √•r"] = round((row.get("Oms√§ttning om 2 √•r", 0) * ps_snitt) / row["Utest√•ende aktier"], 2)
        else:
            df.at[i, "Riktkurs nu"] = 0.0
            df.at[i, "Riktkurs om 1 √•r"] = 0.0
            df.at[i, "Riktkurs om 2 √•r"] = 0.0
    return df

# ---------------------------------------
# INVESTERINGSF√ñRSLAG, OMBALANSERING OCH H√ñGRISKVARNINGAR
# ---------------------------------------

def visa_investeringsforslag(df, valutakurs, max_portfoljandel, max_hogriskandel):
    st.subheader("üìà Investeringsf√∂rslag")

    kapital_sek = st.number_input("Tillg√§ngligt kapital (SEK)", value=10000.0, step=100.0, key="kapital")
    kapital_usd = kapital_sek / valutakurs if valutakurs > 0 else 0

    # Uppdatera portf√∂ljv√§rde och andelar
    df["V√§rde (SEK)"] = df["Antal aktier"] * df["Aktuell kurs"] * valutakurs
    totalvarde = df["V√§rde (SEK)"].sum() if not df.empty else 0
    df["Portf√∂ljandel (%)"] = round(df["V√§rde (SEK)"] / totalvarde * 100, 2) if totalvarde > 0 else 0

    # Ombalanseringssektioner
    minska = df[df["Portf√∂ljandel (%)"] > max_portfoljandel]
    √∂ka = df[(df["Riktkurs om 1 √•r"] > df["Aktuell kurs"]) & (df["Portf√∂ljandel (%)"] < max_portfoljandel)]
    h√∂grisk = df[(df["Oms√§ttning idag"] < 1000) & (df["Portf√∂ljandel (%)"] > max_hogriskandel)]

    if not minska.empty:
        st.write("üîª **Bolag att minska i:**")
        st.dataframe(minska[["Ticker", "Portf√∂ljandel (%)", "V√§rde (SEK)"]])

    if not √∂ka.empty:
        st.write("üîº **Bolag att √∂ka i:**")
        st.dataframe(√∂ka[["Ticker", "Uppsidepotential (%)", "Portf√∂ljandel (%)"]])

    if not h√∂grisk.empty:
        st.write("‚ö†Ô∏è **H√∂griskvarning:**")
        st.dataframe(h√∂grisk[["Ticker", "Oms√§ttning idag", "Portf√∂ljandel (%)"]])

    # Visa investeringsf√∂rslag ett i taget med bl√§ddring
    if "f√∂rslag_index" not in st.session_state:
        st.session_state["f√∂rslag_index"] = 0

    kandidater = √∂ka.sort_values(by="Uppsidepotential (%)", ascending=False).reset_index(drop=True)

    if kandidater.empty:
        st.info("Inga k√∂pf√∂rslag baserat p√• kriterier och kapital.")
        return

    i = st.session_state["f√∂rslag_index"]
    if i >= len(kandidater):
        st.info("Inga fler f√∂rslag. Starta om f√∂r att bl√§ddra igen.")
        if st.button("Starta om f√∂rslag"):
            st.session_state["f√∂rslag_index"] = 0
        return

    rad = kandidater.iloc[i]
    pris = rad["Aktuell kurs"]
    antal = int(kapital_usd // pris) if pris > 0 else 0
    kostnad_sek = round(antal * pris * valutakurs, 2)

    st.markdown(f"K√∂p **{antal} st {rad['Ticker']}** f√∂r ca **{kostnad_sek} SEK**")
    st.markdown(f"Potential: {round(rad['Uppsidepotential (%)'], 2)} % | Riktkurs om 1 √•r: {round(rad['Riktkurs om 1 √•r'], 2)} USD")

    if st.button("N√§sta f√∂rslag"):
        st.session_state["f√∂rslag_index"] += 1

# ---------------------------------------
# L√ÑGG TILL / UPPDATERA BOLAG
# ---------------------------------------

def lagg_till_bolag(df):
    st.subheader("‚ûï L√§gg till eller uppdatera bolag")

    alla_bolag = df["Ticker"].tolist() if not df.empty else []
    valt_bolag = st.selectbox("V√§lj bolag att uppdatera (eller l√§mna tom f√∂r nytt)", [""] + alla_bolag)

    if valt_bolag and valt_bolag in df["Ticker"].values:
        befintlig = df[df["Ticker"] == valt_bolag].iloc[0]
    else:
        befintlig = {}

    kolumner = [
        "Ticker", "Bolagsnamn", "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
        "Oms√§ttning idag", "Oms√§ttning om 1 √•r", "Oms√§ttning om 2 √•r",
        "Aktuell kurs", "Antal aktier"
    ]

    indata = {}
    for kolumn in kolumner:
        standard = befintlig.get(kolumn, 0.0 if kolumn not in ["Ticker", "Bolagsnamn"] else "")
        if kolumn in ["Ticker", "Bolagsnamn"]:
            indata[kolumn] = st.text_input(kolumn, value=str(standard))
        else:
            indata[kolumn] = st.number_input(kolumn, value=float(standard), step=0.01 if kolumn != "Antal aktier" else 1.0)

    if st.button("üíæ Spara bolag"):
        ny_rad = {k: (v if k in ["Ticker", "Bolagsnamn"] else float(v)) for k, v in indata.items()}
        df = df[df["Ticker"] != ny_rad["Ticker"]]
        df = pd.concat([df, pd.DataFrame([ny_rad])], ignore_index=True)
        spara_data(df)
        st.success(f"{ny_rad['Ticker']} sparad.")
    return df

# ---------------------------------------
# SIDOPANEL ‚Äì INST√ÑLLNINGAR
# ---------------------------------------

def visa_sidopanel(inst√§llningar):
    st.sidebar.header("‚öôÔ∏è Inst√§llningar")
    ny_valutakurs = st.sidebar.number_input("Valutakurs (USD till SEK)", value=inst√§llningar["Valutakurs"], step=0.01)
    ny_max_portf = st.sidebar.number_input("Max portf√∂ljandel (%)", value=inst√§llningar["Max portf√∂ljandel"], step=0.01)
    ny_max_risk = st.sidebar.number_input("Max h√∂griskandel (%)", value=inst√§llningar["Max h√∂griskandel"], step=0.01)

    if st.sidebar.button("üíæ Spara inst√§llningar"):
        try:
            sheet = skapa_koppling(SETTINGS_SHEET_NAME)
            sheet.update("B2", [[str(ny_valutakurs).replace(".", ",")]])
            sheet.update("B3", [[str(ny_max_portf).replace(".", ",")]])
            sheet.update("B4", [[str(ny_max_risk).replace(".", ",")]])
            sheet.update("B5", [[datetime.today().strftime("%Y-%m-%d")]])
            st.sidebar.success("Inst√§llningar uppdaterade.")
        except Exception as e:
            st.sidebar.error(f"Fel vid uppdatering av inst√§llningar: {e}")

    return {
        "Valutakurs": ny_valutakurs,
        "Max portf√∂ljandel": ny_max_portf,
        "Max h√∂griskandel": ny_max_risk
    }

# ---------------------------------------
# HUVUDFUNKTION & MENYVAL
# ---------------------------------------

def main():
    st.title("üìà Aktieanalys & investeringsf√∂rslag ‚Äì Manuell valutakurs och aktiekurs")

    df = hamta_data()
    df = s√§kerst√§ll_kolumner(df)
    df = konvertera_typer(df)

    inst√§llningar = las_inst√§llningar()
    # Visa sidopanel och l√•t anv√§ndaren eventuellt √§ndra inst√§llningar
    uppdaterade_inst√§llningar = visa_sidopanel(inst√§llningar)

    meny = st.sidebar.radio("Navigera", ["Analys", "L√§gg till / uppdatera bolag", "Investeringsf√∂rslag", "Portf√∂lj"])

    if meny == "Analys":
        df = uppdatera_berakningar(df)
        st.dataframe(df, use_container_width=True)

    elif meny == "L√§gg till / uppdatera bolag":
        df = lagg_till_bolag(df)

    elif meny == "Investeringsf√∂rslag":
        df = uppdatera_berakningar(df)
        visa_investeringsforslag(
            df,
            uppdaterade_inst√§llningar["Valutakurs"],
            uppdaterade_inst√§llningar["Max portf√∂ljandel"],
            uppdaterade_inst√§llningar["Max h√∂griskandel"],
        )

    elif meny == "Portf√∂lj":
        visa_portfolj(df, uppdaterade_inst√§llningar["Valutakurs"])

    spara_data(df)

if __name__ == "__main__":
    main()
