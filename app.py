# app.py ‚Äì Del 1: Setup, autentisering och dataladdning

import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# Google Sheets inst√§llningar
SHEET_URL = "https://docs.google.com/spreadsheets/d/1-5JSJpqBB0j7sm3cgEGZmnFoBL_oJDPMpLdleggL0HQ/edit?usp=drivesdk"
SHEET_NAME = "Blad1"
SETTINGS_SHEET = "Inst√§llningar"

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(
    st.secrets["GOOGLE_CREDENTIALS"], scope)
client = gspread.authorize(credentials)

# Ladda data fr√•n Google Sheets
def load_data():
    sheet = client.open_by_url(SHEET_URL).worksheet(SHEET_NAME)
    data = sheet.get_all_records()
    return pd.DataFrame(data)

# Spara data till Google Sheets
def save_data(df):
    sheet = client.open_by_url(SHEET_URL).worksheet(SHEET_NAME)
    df_clean = df.copy().fillna("")
    df_clean = df_clean.astype(str)
    sheet.update([df_clean.columns.values.tolist()] + df_clean.values.tolist())

# Skapa inst√§llningsblad om det inte finns
def skapa_inst√§llningsblad():
    spreadsheet = client.open_by_url(SHEET_URL)
    try:
        spreadsheet.worksheet(SETTINGS_SHEET)
    except gspread.WorksheetNotFound:
        sheet = spreadsheet.add_worksheet(title=SETTINGS_SHEET, rows="10", cols="3")
        sheet.update("A1:C1", [["Namn", "V√§rde", "Senast √§ndrad"]])
        default_rows = [
            ["Valutakurs", "9.50", datetime.today().strftime("%Y-%m-%d")],
            ["Max portf√∂ljandel (%)", "20", datetime.today().strftime("%Y-%m-%d")],
            ["Max h√∂griskandel (%)", "2", datetime.today().strftime("%Y-%m-%d")]
        ]
        sheet.update("A2:C4", default_rows)

# Ladda inst√§llningar
def load_settings():
    skapa_inst√§llningsblad()
    sheet = client.open_by_url(SHEET_URL).worksheet(SETTINGS_SHEET)
    rows = sheet.get_all_records()
    return {row["Namn"]: float(row["V√§rde"]) for row in rows}

# Spara inst√§llningar
def save_settings(updated_settings):
    sheet = client.open_by_url(SHEET_URL).worksheet(SETTINGS_SHEET)
    rows = sheet.get_all_records()
    df = pd.DataFrame(rows)
    for key, value in updated_settings.items():
        df.loc[df["Namn"] == key, "V√§rde"] = value
        df.loc[df["Namn"] == key, "Senast √§ndrad"] = datetime.today().strftime("%Y-%m-%d")
    sheet.update([df.columns.tolist()] + df.astype(str).values.tolist())

# Starta
df = load_data()
settings = load_settings()

# app.py ‚Äì Del 2: Investeringsf√∂rslag och analysfunktioner

def √§r_h√∂grisk(row):
    try:
        oms√§ttning = float(row.get("Oms√§ttning (miljoner USD)", 0))
        andel = float(row.get("Andel av portf√∂lj (%)", 0))
        return oms√§ttning < 1000 and andel >= settings["Max h√∂griskandel (%)"]
    except:
        return False

def √∂ver_maxandel(row):
    try:
        return float(row.get("Andel av portf√∂lj (%)", 0)) > settings["Max portf√∂ljandel (%)"]
    except:
        return False

def investeringsforslag(df, kapital_sek, valutakurs):
    df = df.copy()
    df["Aktuell kurs (USD)"] = df["Aktuell kurs (USD)"].astype(str).str.replace(",", ".").astype(float)
    df["M√•lkurs 2025"] = df["M√•lkurs 2025"].astype(str).str.replace(",", ".").astype(float)
    df["M√•lkurs 2026"] = df["M√•lkurs 2026"].astype(str).str.replace(",", ".").astype(float)

    df["Uppside (%)"] = round((df["M√•lkurs 2025"] - df["Aktuell kurs (USD)"]) / df["Aktuell kurs (USD)"] * 100, 2)

    bolag_att_oka = df[
        (df["Uppside (%)"] > 0) &
        (df["Andel av portf√∂lj (%)"].astype(float) < settings["Max portf√∂ljandel (%)"])
    ].sort_values(by="Uppside (%)", ascending=False)

    bolag_att_minska = df[df["Andel av portf√∂lj (%)"].astype(float) > settings["Max portf√∂ljandel (%)"]]

    h√∂grisk = df[df.apply(√§r_h√∂grisk, axis=1)]

    resultat = []

    kapital_usd = kapital_sek / valutakurs
    tillg√§ngligt = kapital_usd

    for _, row in bolag_att_oka.iterrows():
        if float(row["Andel av portf√∂lj (%)"]) >= settings["Max portf√∂ljandel (%)"]:
            continue
        pris = row["Aktuell kurs (USD)"]
        om pris <= 0:
            continue
        antal = int(tillg√§ngligt // pris)
        if antal == 0:
            break
        investering = antal * pris
        tillg√§ngligt -= investering
        resultat.append({
            "Ticker": row["Ticker"],
            "F√∂reslaget antal": antal,
            "Kostnad (USD)": round(investering, 2),
            "Kostnad (SEK)": round(investering * valutakurs, 2),
            "Uppside (%)": row["Uppside (%)"]
        })

    return resultat, tillg√§ngligt * valutakurs, bolag_att_minska, h√∂grisk

# app.py ‚Äì Del 3: Vyer f√∂r investeringsf√∂rslag och inst√§llningar

def visa_investeringsrad(df, valutakurs):
    st.header("üìà Investeringsf√∂rslag")

    kapital_sek = st.number_input("Tillg√§ngligt kapital (SEK)", min_value=0, value=1000)
    if valutakurs == 0:
        st.error("Valutakurs kan inte vara 0.")
        return

    try:
        forslag, rest_sek, minska_df, h√∂grisk_df = investeringsforslag(df, kapital_sek, valutakurs)

        st.subheader("üîª Bolag att minska i")
        if not minska_df.empty:
            st.dataframe(minska_df[["Ticker", "Andel av portf√∂lj (%)"]])
        else:
            st.write("Inga √∂verexponerade innehav.")

        st.subheader("üîº Bolag att √∂ka i")
        if forslag:
            st.table(forslag)
            if rest_sek < kapital_sek:
                st.success(f"Restkapital: {round(rest_sek)} SEK")
            else:
                st.warning("Kapitalet r√§cker inte f√∂r n√•got f√∂rslag. √ñka beloppet f√∂r att se investeringar.")
        else:
            st.info("Inga k√∂pf√∂rslag baserat p√• kriterierna och tillg√§ngligt kapital.")

        st.subheader("‚ö†Ô∏è H√∂griskvarningar")
        if not h√∂grisk_df.empty:
            st.dataframe(h√∂grisk_df[["Ticker", "Oms√§ttning (miljoner USD)", "Andel av portf√∂lj (%)"]])
        else:
            st.write("Inga h√∂griskvarningar.")

    except Exception as e:
        st.error(f"Fel vid generering av f√∂rslag: {e}")

def inst√§llningar_panel():
    st.sidebar.header("‚öôÔ∏è Inst√§llningar")
    max_portf√∂ljandel = st.sidebar.number_input(
        "Max portf√∂ljandel (%)", min_value=1, max_value=100,
        value=settings["Max portf√∂ljandel (%)"]
    )
    max_h√∂griskandel = st.sidebar.number_input(
        "Max andel i h√∂griskbolag (%)", min_value=1, max_value=100,
        value=settings["Max h√∂griskandel (%)"]
    )
    valutakurs = st.sidebar.number_input(
        "Valutakurs USD/SEK", min_value=0.01, value=settings["Valutakurs"], format="%.4f"
    )

    if st.sidebar.button("Spara inst√§llningar"):
        new_settings = {
            "Max portf√∂ljandel (%)": max_portf√∂ljandel,
            "Max h√∂griskandel (%)": max_h√∂griskandel,
            "Valutakurs": valutakurs
        }
        save_settings(new_settings)
        st.sidebar.success("Inst√§llningar sparade!")

    return valutakurs

# app.py ‚Äì Del 4: Huvudfunktion, formul√§r, vyval

def main():
    st.set_page_config(page_title="K√∂pf√∂rslag", layout="wide")
    st.title("üìä Aktieanalys & Investeringsf√∂rslag")

    global settings
    settings = load_settings()

    valutakurs = inst√§llningar_panel()

    df = ladda_data()
    df = konvertera_till_ratt_typ(df)

    meny = st.sidebar.radio("V√§lj vy", ["üìã Lista bolag", "‚ûï L√§gg till/Uppdatera bolag", "üí° Investeringsf√∂rslag"])

    if meny == "üìã Lista bolag":
        st.header("üìã Bolagslista")
        if not df.empty:
            st.dataframe(df)
        else:
            st.info("Databasen √§r tom.")
    elif meny == "‚ûï L√§gg till/Uppdatera bolag":
        st.header("‚ûï L√§gg till eller uppdatera ett bolag")

        alla_bolag = df["Ticker"].tolist()
        valt_bolag = st.selectbox("V√§lj bolag att uppdatera (eller l√§mna tom f√∂r nytt):", [""] + alla_bolag)

        if valt_bolag and valt_bolag in df["Ticker"].values:
            bolagsdata = df[df["Ticker"] == valt_bolag].iloc[0]
        else:
            bolagsdata = {}

        with st.form("l√§gg_till_form"):
            ticker = st.text_input("Ticker", value=bolagsdata.get("Ticker", ""))
            namn = st.text_input("Bolagsnamn", value=bolagsdata.get("Bolagsnamn", ""))
            aktuell_kurs = st.number_input("Aktuell kurs (USD)", value=float(bolagsdata.get("Aktuell kurs", 0)), step=0.01, format="%.2f")
            m√•l_2025 = st.number_input("M√•lkurs 2025", value=float(bolagsdata.get("M√•lkurs 2025", 0)), step=0.01)
            m√•l_2026 = st.number_input("M√•lkurs 2026", value=float(bolagsdata.get("M√•lkurs 2026", 0)), step=0.01)
            p_s_q1 = st.number_input("P/S Q1", value=float(bolagsdata.get("P/S Q1", 0)), step=0.01)
            p_s_rullande = st.number_input("P/S rullande", value=float(bolagsdata.get("P/S rullande", 0)), step=0.01)
            oms√§ttning = st.number_input("Oms√§ttning (miljoner USD)", value=float(bolagsdata.get("Oms√§ttning (miljoner USD)", 0)), step=0.01)
            portf√∂ljandel = st.number_input("Andel av portf√∂lj (%)", value=float(bolagsdata.get("Andel av portf√∂lj (%)", 0)), step=0.01)
            senast_uppdaterad = datetime.today().strftime("%Y-%m-%d")

            submitted = st.form_submit_button("Spara")

        if submitted:
            ny_rad = {
                "Ticker": ticker,
                "Bolagsnamn": namn,
                "Aktuell kurs": aktuell_kurs,
                "M√•lkurs 2025": m√•l_2025,
                "M√•lkurs 2026": m√•l_2026,
                "P/S Q1": p_s_q1,
                "P/S rullande": p_s_rullande,
                "Oms√§ttning (miljoner USD)": oms√§ttning,
                "Andel av portf√∂lj (%)": portf√∂ljandel,
                "Senast uppdaterad": senast_uppdaterad
            }

            df = df[df["Ticker"] != ticker]  # ta bort ev. gammal
            df = pd.concat([df, pd.DataFrame([ny_rad])], ignore_index=True)
            save_data(df)
            st.success(f"{ticker} har sparats.")

    elif meny == "üí° Investeringsf√∂rslag":
        visa_investeringsrad(df, valutakurs)


if __name__ == "__main__":
    main()

# app.py ‚Äì Del 5: Investeringslogik och hj√§lpfunktioner

def konvertera_till_ratt_typ(df):
    numeriska_kolumner = [
        "Aktuell kurs", "M√•lkurs 2025", "M√•lkurs 2026", "P/S Q1", "P/S rullande",
        "Oms√§ttning (miljoner USD)", "Andel av portf√∂lj (%)"
    ]
    for kolumn in numeriska_kolumner:
        if kolumn in df.columns:
            df[kolumn] = pd.to_numeric(df[kolumn], errors="coerce")
    return df

def investeringsforslag(df, kapital_sek, valutakurs):
    kapital_usd = kapital_sek / valutakurs
    max_andel = settings.get("Max portf√∂ljandel (%)", 20)
    max_risk = settings.get("Max h√∂griskandel (%)", 2)

    forslag = []
    h√∂grisk_df = pd.DataFrame()
    minska_df = df[df["Andel av portf√∂lj (%)"] > max_andel]

    kandidater = df[
        (df["Andel av portf√∂lj (%)"] < max_andel) &
        (df["M√•lkurs 2025"] > df["Aktuell kurs"])
    ].copy()

    kandidater["Potential (%)"] = round(((kandidater["M√•lkurs 2025"] - kandidater["Aktuell kurs"]) / kandidater["Aktuell kurs"]) * 100, 1)
    kandidater = kandidater.sort_values(by="Potential (%)", ascending=False)

    for _, row in kandidater.iterrows():
        ticker = row["Ticker"]
        kurs = row["Aktuell kurs"]
        oms√§ttning = row["Oms√§ttning (miljoner USD)"]
        andel = row["Andel av portf√∂lj (%)"]

        belopp = kapital_usd
        antal = int(belopp // kurs)

        if antal > 0:
            investering_usd = antal * kurs
            investering_sek = investering_usd * valutakurs
            ny_andel = andel + ((investering_usd / (kapital_usd + 1e-6)) * 100)

            h√∂grisk = oms√§ttning < 1000 and andel >= max_risk
            if h√∂grisk:
                h√∂grisk_df = pd.concat([h√∂grisk_df, pd.DataFrame([row])])

            forslag.append({
                "Ticker": ticker,
                "Antal": antal,
                "Kurs (USD)": round(kurs, 2),
                "Investering (SEK)": round(investering_sek, 2),
                "Potential (%)": row["Potential (%)"]
            })

            kapital_usd -= antal * kurs

    return forslag, kapital_usd * valutakurs, minska_df, h√∂grisk_df

# app.py ‚Äì Del 6: Autentisering, Google Sheets, inst√§llningar

import streamlit as st
import gspread
from google.oauth2.service_account import Credentials

SHEET_URL = "https://docs.google.com/spreadsheets/d/1-5JSJpqBB0j7sm3cgEGZmnFoBL_oJDPMpLdleggL0HQ/edit?usp=drivesdk"
SHEET_NAME = "Blad1"
SETTINGS_SHEET = "Inst√§llningar"

def load_credentials():
    credentials_dict = st.secrets["norremt"]
    credentials = Credentials.from_service_account_info(credentials_dict)
    client = gspread.authorize(credentials)
    return client

def save_data(df):
    df = df.fillna("")
    df = df.astype(str)
    client = load_credentials()
    sheet = client.open_by_url(SHEET_URL).worksheet(SHEET_NAME)
    sheet.clear()
    sheet.update([df.columns.values.tolist()] + df.values.tolist())

def load_settings():
    try:
        client = load_credentials()
        sheet = client.open_by_url(SHEET_URL)
        try:
            worksheet = sheet.worksheet(SETTINGS_SHEET)
        except gspread.exceptions.WorksheetNotFound:
            worksheet = sheet.add_worksheet(title=SETTINGS_SHEET, rows="10", cols="3")
            worksheet.update("A1:C1", [["Inst√§llning", "V√§rde", "Senast √§ndrad"]])
            worksheet.append_row(["Max portf√∂ljandel (%)", "20", str(datetime.today().date())])
            worksheet.append_row(["Max h√∂griskandel (%)", "2", str(datetime.today().date())])
            worksheet.append_row(["Valutakurs", "10", str(datetime.today().date())])
        data = worksheet.get_all_records()
        return {row["Inst√§llning"]: float(row["V√§rde"]) for row in data if row["V√§rde"] != ""}
    except Exception as e:
        st.error(f"Kunde inte ladda inst√§llningar: {e}")
        return {}

def save_settings(settings_dict):
    try:
        client = load_credentials()
        sheet = client.open_by_url(SHEET_URL).worksheet(SETTINGS_SHEET)
        existing = sheet.get_all_records()
        existing_dict = {row["Inst√§llning"]: i+2 for i, row in enumerate(existing)}

        for key, value in settings_dict.items():
            rad = existing_dict.get(key)
            if rad:
                sheet.update_cell(rad, 2, str(value))
                sheet.update_cell(rad, 3, str(datetime.today().date()))
            else:
                sheet.append_row([key, str(value), str(datetime.today().date())])
    except Exception as e:
        st.error(f"Kunde inte spara inst√§llningar: {e}")

# app.py ‚Äì Del 7: Huvudfunktion och UI-menyer

import streamlit as st
import pandas as pd

def main():
    st.set_page_config(page_title="Investeringsanalys", layout="wide")
    st.title("üìä Aktieanalys & Investeringsf√∂rslag")

    inst√§llningar = load_settings()
    max_andel = inst√§llningar.get("Max portf√∂ljandel (%)", 20)
    max_h√∂grisk = inst√§llningar.get("Max h√∂griskandel (%)", 2)
    valutakurs = inst√§llningar.get("Valutakurs", 10)

    # Sidopanel
    st.sidebar.header("Inst√§llningar")
    valutakurs = st.sidebar.number_input("Valutakurs (USD ‚Üí SEK)", value=valutakurs, step=0.01)
    max_andel = st.sidebar.number_input("Max portf√∂ljandel (%)", value=max_andel, step=1)
    max_h√∂grisk = st.sidebar.number_input("Max h√∂griskandel (%)", value=max_h√∂grisk, step=0.1)

    if st.sidebar.button("üíæ Spara inst√§llningar"):
        save_settings({
            "Valutakurs": valutakurs,
            "Max portf√∂ljandel (%)": max_andel,
            "Max h√∂griskandel (%)": max_h√∂grisk,
        })
        st.sidebar.success("Inst√§llningar sparade.")

    menyval = st.sidebar.radio("V√§lj vy", ["üìà Investeringsf√∂rslag", "üßÆ L√§gg till / uppdatera bolag", "üìã Databasen", "‚öôÔ∏è Inst√§llningar"])

    df = hamta_data()
    df = konvertera_till_ratt_typ(df)

    if menyval == "üßÆ L√§gg till / uppdatera bolag":
        lagg_till_eller_uppdatera_bolag(df)

    elif menyval == "üìà Investeringsf√∂rslag":
        visa_investeringsrad(df, valutakurs)

    elif menyval == "üìã Databasen":
        st.subheader("üìÑ Bolagsdatabas")
        st.dataframe(df)

    elif menyval == "‚öôÔ∏è Inst√§llningar":
        st.subheader("‚öôÔ∏è Nuvarande inst√§llningar")
        st.write(pd.DataFrame.from_dict(inst√§llningar, orient="index", columns=["V√§rde"]))

if __name__ == "__main__":
    main()
