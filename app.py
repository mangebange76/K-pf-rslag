# app.py
import streamlit as st
import pandas as pd

from sheets_utils import (
    hamta_data, spara_data, las_sparade_valutakurser, spara_valutakurser,
    hamta_valutakurs, skapa_snapshot_om_saknas, now_stamp
)
from views import (
    hamta_valutakurser_sidebar, massuppdatera, lagg_till_eller_uppdatera,
    analysvy, visa_investeringsforslag, visa_hamtlogg_panel, spara_logg_till_sheets
)
from calc_and_cache import uppdatera_berakningar

# ---------- Sidinst√§llning ----------
st.set_page_config(page_title="Aktieanalys och investeringsf√∂rslag", layout="wide")

# ---------- Kolumnschema ----------
FINAL_COLS = [
    # Bas
    "Ticker", "Bolagsnamn", "Valuta", "Aktuell kurs", "√Örlig utdelning",
    "Utest√•ende aktier", "Antal aktier",
    # P/S & kvartal
    "P/S", "P/S Q1", "P/S Q2", "P/S Q3", "P/S Q4",
    "P/S Q1 datum", "P/S Q2 datum", "P/S Q3 datum", "P/S Q4 datum",
    "K√§lla Aktuell kurs", "K√§lla Utest√•ende aktier", "K√§lla P/S", "K√§lla P/S Q1", "K√§lla P/S Q2", "K√§lla P/S Q3", "K√§lla P/S Q4",
    # Oms√§ttning & riktkurser
    "Oms√§ttning idag", "Oms√§ttning n√§sta √•r", "Oms√§ttning om 2 √•r", "Oms√§ttning om 3 √•r",
    "Riktkurs idag", "Riktkurs om 1 √•r", "Riktkurs om 2 √•r", "Riktkurs om 3 √•r",
    # Derivat/√∂vrigt
    "CAGR 5 √•r (%)", "P/S-snitt",
    # Tidsst√§mplar & meta
    "Senast manuellt uppdaterad", "Senast auto uppdaterad",
    "TS P/S", "TS Utest√•ende aktier", "TS Oms√§ttning",
]

def s√§kerst√§ll_kolumner(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    for kol in FINAL_COLS:
        if kol not in df.columns:
            if any(x in kol.lower() for x in ["kurs","oms√§ttning","p/s","utdelning","cagr","antal","riktkurs","aktier","snitt"]):
                df[kol] = 0.0
            else:
                df[kol] = ""
    return df

def migrera_gamla_riktkurskolumner(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    mapping = {
        "Riktkurs 2026": "Riktkurs om 1 √•r",
        "Riktkurs 2027": "Riktkurs om 2 √•r",
        "Riktkurs 2028": "Riktkurs om 3 √•r",
        "Riktkurs om idag": "Riktkurs idag",
    }
    for old, new in mapping.items():
        if old in df.columns:
            if new not in df.columns:
                df[new] = 0.0
            new_vals = pd.to_numeric(df[new], errors="coerce").fillna(0.0)
            old_vals = pd.to_numeric(df[old], errors="coerce").fillna(0.0)
            mask = (new_vals == 0.0) & (old_vals > 0.0)
            df.loc[mask, new] = old_vals[mask]
            df = df.drop(columns=[old])
    return df

def konvertera_typer(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    num_cols = [
        "Utest√•ende aktier","Antal aktier",
        "P/S","P/S Q1","P/S Q2","P/S Q3","P/S Q4",
        "Oms√§ttning idag","Oms√§ttning n√§sta √•r","Oms√§ttning om 2 √•r","Oms√§ttning om 3 √•r",
        "Riktkurs idag","Riktkurs om 1 √•r","Riktkurs om 2 √•r","Riktkurs om 3 √•r",
        "Aktuell kurs","√Örlig utdelning","CAGR 5 √•r (%)","P/S-snitt",
    ]
    for c in num_cols:
        if c in df.columns:
            df[c] = pd.to_numeric(df[c], errors="coerce").fillna(0.0)
    for c in [
        "Ticker","Bolagsnamn","Valuta",
        "P/S Q1 datum","P/S Q2 datum","P/S Q3 datum","P/S Q4 datum",
        "K√§lla Aktuell kurs","K√§lla Utest√•ende aktier","K√§lla P/S","K√§lla P/S Q1","K√§lla P/S Q2","K√§lla P/S Q3","K√§lla P/S Q4",
        "Senast manuellt uppdaterad","Senast auto uppdaterad",
        "TS P/S","TS Utest√•ende aktier","TS Oms√§ttning",
    ]:
        if c in df.columns:
            df[c] = df[c].astype(str)
    return df

# ---------- Portf√∂ljvy (lokal, enkel) ----------
def visa_portfolj(df: pd.DataFrame, user_rates: dict) -> None:
    st.header("üì¶ Min portf√∂lj")
    port = df[df["Antal aktier"] > 0].copy()
    if port.empty:
        st.info("Du √§ger inga aktier.")
        return
    port["V√§xelkurs"] = port["Valuta"].apply(lambda v: hamta_valutakurs(v, user_rates))
    port["V√§rde (SEK)"] = port["Antal aktier"] * port["Aktuell kurs"] * port["V√§xelkurs"]
    total_v√§rde = float(port["V√§rde (SEK)"].sum())
    port["Andel (%)"] = (port["V√§rde (SEK)"] / total_v√§rde * 100.0).round(2)
    port["Total √•rlig utdelning (SEK)"] = port["Antal aktier"] * port["√Örlig utdelning"] * port["V√§xelkurs"]

    st.markdown(f"**Totalt portf√∂ljv√§rde:** {round(total_v√§rde,2)} SEK")
    tot_utd = float(port["Total √•rlig utdelning (SEK)"].sum())
    st.markdown(f"**Total kommande utdelning:** {round(tot_utd,2)} SEK")
    st.markdown(f"**Ungef√§rlig m√•nadsutdelning:** {round(tot_utd/12.0,2)} SEK")

    st.dataframe(
        port[["Ticker","Bolagsnamn","Antal aktier","Aktuell kurs","Valuta","V√§rde (SEK)","Andel (%)","√Örlig utdelning","Total √•rlig utdelning (SEK)"]],
        use_container_width=True
    )

# ---------- MAIN ----------
def main():
    st.title("üìä Aktieanalys och investeringsf√∂rslag")

    # Valutakurser + h√§mtlogg i sidopanelen
    user_rates = hamta_valutakurser_sidebar()
    visa_hamtlogg_panel()
    if st.sidebar.button("üóÉÔ∏è Spara h√§mtlogg till Sheets"):
        spara_logg_till_sheets()

    # L√§s data
    df = hamta_data()
    if df.empty:
        df = pd.DataFrame({c: [] for c in FINAL_COLS})
        spara_data(df)

    # S√§kerst√§ll schema och typer
    df = s√§kerst√§ll_kolumner(df)
    df = migrera_gamla_riktkurskolumner(df)
    df = konvertera_typer(df)

    # üì∏ Snapshot vid start (en g√•ng per dag)
    if "did_bootstrap_snapshot" not in st.session_state:
        ok, msg = skapa_snapshot_om_saknas(df)
        st.session_state["did_bootstrap_snapshot"] = True
        if ok:
            st.sidebar.success(msg)
        else:
            st.sidebar.caption(msg)

    # Global massuppdateringsknapp i sidopanelen
    df = massuppdatera(df, key_prefix="global", user_rates=user_rates)

    # Meny
    meny = st.sidebar.radio("üìå V√§lj vy", ["Analys","L√§gg till / uppdatera bolag","Investeringsf√∂rslag","Portf√∂lj"])

    if meny == "Analys":
        analysvy(df, user_rates)
    elif meny == "L√§gg till / uppdatera bolag":
        df = lagg_till_eller_uppdatera(df, user_rates)
    elif meny == "Investeringsf√∂rslag":
        df = uppdatera_berakningar(df, user_rates)
        visa_investeringsforslag(df, user_rates)
    elif meny == "Portf√∂lj":
        df = uppdatera_berakningar(df, user_rates)
        visa_portfolj(df, user_rates)

if __name__ == "__main__":
    main()
