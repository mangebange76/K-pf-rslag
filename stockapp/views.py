# stockapp/views.py
# -*- coding: utf-8 -*-
from __future__ import annotations
from typing import List, Dict, Tuple, Optional
from datetime import datetime, timedelta, date

import numpy as np
import pandas as pd
import streamlit as st

from .config import FINAL_COLS, TS_FIELDS
from .rates import hamta_valutakurs
from .sources import run_update_price_only, run_update_full

# F√∂r rankning (med fallback om modulen saknas)
try:
    from .scoring import rank_candidates, format_investment_badges
except Exception:
    def rank_candidates(df: pd.DataFrame, mode: str = "growth") -> pd.DataFrame:
        out = df.copy()
        out["_score"] = 0.0
        # Enkel fallback: h√∂gst uppsida via "Potential (%)" om finns
        if "Potential (%)" in out.columns:
            out["_score"] = out["Potential (%)"].fillna(0.0)
        else:
            out["_score"] = out.get("P/S-snitt", 0.0).rsub(out["P/S-snitt"].max()).fillna(0.0)
        return out.sort_values(by="_score", ascending=False)

    def format_investment_badges(row: pd.Series) -> str:
        return ""

# ---------------------------
# Hj√§lpare (ber√§kningar/UI)
# ---------------------------

def _now_stamp() -> str:
    try:
        import pytz
        tz = pytz.timezone("Europe/Stockholm")
        return datetime.now(tz).strftime("%Y-%m-%d")
    except Exception:
        return datetime.now().strftime("%Y-%m-%d")

def _format_mcap(x: float) -> str:
    try:
        v = float(x)
    except Exception:
        return "-"
    neg = v < 0
    v = abs(v)
    if v >= 1_000_000_000_000:
        s = f"{v/1_000_000_000_000:.2f} T"
    elif v >= 1_000_000_000:
        s = f"{v/1_000_000_000:.2f} B"
    elif v >= 1_000_000:
        s = f"{v/1_000_000:.2f} M"
    else:
        s = f"{v:.0f}"
    return f"-{s}" if neg else s

def _ensure_schema(df: pd.DataFrame) -> pd.DataFrame:
    for col in FINAL_COLS:
        if col not in df.columns:
            if any(x in col.lower() for x in ["kurs","oms√§ttning","p/s","utdelning","cagr","antal","riktkurs","aktier","snitt","mcap"]):
                df[col] = 0.0
            elif col.startswith("TS_"):
                df[col] = ""
            elif col in ("Senast manuellt uppdaterad","Senast auto-uppdaterad","Senast uppdaterad k√§lla"):
                df[col] = ""
            else:
                df[col] = ""
    # unika kolumner
    df = df.loc[:, ~df.columns.duplicated()].copy()
    return df

def _cagr_clamp(val: float) -> float:
    if val is None:
        return 0.0
    v = float(val)
    if v > 100.0: return 50.0
    if v < 0.0:   return 2.0
    return v

def uppdatera_berakningar(df: pd.DataFrame, user_rates: Dict[str,float]) -> pd.DataFrame:
    """Replikerar dina tidigare h√§rledda f√§lt."""
    df = _ensure_schema(df.copy())
    for i, r in df.iterrows():
        # P/S-snitt
        ps_vals = [r.get("P/S Q1",0), r.get("P/S Q2",0), r.get("P/S Q3",0), r.get("P/S Q4",0)]
        ps_clean = [float(x) for x in ps_vals if float(x) > 0]
        df.at[i, "P/S-snitt"] = round(float(np.mean(ps_clean)) if ps_clean else 0.0, 2)

        # Oms√§ttning 2 & 3 √•r fr√•n 'Oms√§ttning n√§sta √•r'
        cagr = _cagr_clamp(r.get("CAGR 5 √•r (%)", 0.0)) / 100.0
        oms_next = float(r.get("Oms√§ttning n√§sta √•r", 0.0))
        if oms_next > 0:
            df.at[i, "Oms√§ttning om 2 √•r"] = round(oms_next * (1.0 + cagr), 2)
            df.at[i, "Oms√§ttning om 3 √•r"] = round(oms_next * ((1.0 + cagr) ** 2), 2)
        else:
            df.at[i, "Oms√§ttning om 2 √•r"] = float(r.get("Oms√§ttning om 2 √•r", 0.0))
            df.at[i, "Oms√§ttning om 3 √•r"] = float(r.get("Oms√§ttning om 3 √•r", 0.0))

        # Riktkurser
        psn = float(df.at[i, "P/S-snitt"] or 0.0)
        shares_m = float(r.get("Utest√•ende aktier", 0.0))
        if psn > 0 and shares_m > 0:
            act = float(r.get("Oms√§ttning idag", 0.0))
            nxt = float(r.get("Oms√§ttning n√§sta √•r", 0.0))
            y2  = float(df.at[i, "Oms√§ttning om 2 √•r"] or 0.0)
            y3  = float(df.at[i, "Oms√§ttning om 3 √•r"] or 0.0)
            den = shares_m  # miljoner aktier -> oms√§ttning m i samma valuta
            df.at[i, "Riktkurs idag"]    = round((act * psn) / den, 2) if act>0 else 0.0
            df.at[i, "Riktkurs om 1 √•r"] = round((nxt * psn) / den, 2) if nxt>0 else 0.0
            df.at[i, "Riktkurs om 2 √•r"] = round((y2  * psn) / den, 2) if y2>0 else 0.0
            df.at[i, "Riktkurs om 3 √•r"] = round((y3  * psn) / den, 2) if y3>0 else 0.0
        else:
            df.at[i, "Riktkurs idag"] = df.at[i, "Riktkurs om 1 √•r"] = df.at[i, "Riktkurs om 2 √•r"] = df.at[i, "Riktkurs om 3 √•r"] = 0.0
    return df

def _oldest_any_ts(row: pd.Series) -> Optional[pd.Timestamp]:
    dates = []
    for c in TS_FIELDS.values():
        if c in row and str(row[c]).strip():
            try:
                d = pd.to_datetime(str(row[c]).strip(), errors="coerce")
                if pd.notna(d):
                    dates.append(d)
            except Exception:
                pass
    return min(dates) if dates else None

def add_oldest_ts_col(df: pd.DataFrame) -> pd.DataFrame:
    work = df.copy()
    work["_oldest_any_ts"] = work.apply(_oldest_any_ts, axis=1)
    work["_oldest_any_ts_fill"] = pd.to_datetime(work["_oldest_any_ts"], errors="coerce").fillna(pd.Timestamp("2099-12-31"))
    return work

def build_requires_manual_df(df: pd.DataFrame, older_than_days: int = 365) -> pd.DataFrame:
    """
    Flaggar bolag d√§r n√•got k√§rnf√§lt saknas/TS saknas, eller √§ldsta TS √§r f√∂r gammal.
    """
    need_cols = ["Utest√•ende aktier","P/S","P/S Q1","P/S Q2","P/S Q3","P/S Q4","Oms√§ttning idag","Oms√§ttning n√§sta √•r"]
    ts_cols = [TS_FIELDS[c] for c in TS_FIELDS if c in need_cols]
    out_rows = []
    cutoff = datetime.now() - timedelta(days=older_than_days)
    for _, r in df.iterrows():
        missing_val = any((float(r.get(c, 0.0)) <= 0.0) for c in need_cols)
        missing_ts  = any((not str(r.get(ts, "")).strip()) for ts in ts_cols if ts in r)
        oldest = _oldest_any_ts(r)
        oldest_dt = pd.to_datetime(oldest).to_pydatetime() if pd.notna(oldest) else None
        too_old = (oldest_dt is not None and oldest_dt < cutoff)
        if missing_val or missing_ts or too_old:
            out_rows.append({
                "Ticker": r.get("Ticker",""),
                "Bolagsnamn": r.get("Bolagsnamn",""),
                "√Ñldsta TS": oldest.strftime("%Y-%m-%d") if pd.notna(oldest) else "",
                "Saknar v√§rde?": "Ja" if missing_val else "Nej",
                "Saknar TS?": "Ja" if missing_ts else "Nej",
            })
    return pd.DataFrame(out_rows)

def _manual_forecast_list(df: pd.DataFrame, top_n: int = 20) -> pd.DataFrame:
    """
    Manuell prognoslista: sortera p√• √§ldsta TS av *just* Oms√§ttning idag / n√§sta √•r.
    """
    df2 = df.copy()
    def _pick_oldest_oms_ts(row: pd.Series) -> Optional[pd.Timestamp]:
        keys = [TS_FIELDS.get("Oms√§ttning idag"), TS_FIELDS.get("Oms√§ttning n√§sta √•r")]
        dates = []
        for k in keys:
            if k and k in row and str(row[k]).strip():
                d = pd.to_datetime(str(row[k]).strip(), errors="coerce")
                if pd.notna(d):
                    dates.append(d)
        return min(dates) if dates else pd.NaT
    df2["_oldest_oms_ts"] = df2.apply(_pick_oldest_oms_ts, axis=1)
    df2["_oldest_oms_ts_fill"] = pd.to_datetime(df2["_oldest_oms_ts"], errors="coerce").fillna(pd.Timestamp("2099-12-31"))
    vis = df2.sort_values(by=["_oldest_oms_ts_fill","Bolagsnamn"]).head(top_n)
    show_cols = ["Ticker","Bolagsnamn", TS_FIELDS.get("Oms√§ttning idag",""), TS_FIELDS.get("Oms√§ttning n√§sta √•r",""), "_oldest_oms_ts"]
    show_cols = [c for c in show_cols if c]
    return vis[show_cols]

def _risk_label(mcap: float) -> str:
    try:
        v = float(mcap)
    except Exception:
        return "Unknown"
    if v < 300e6: return "Microcap"
    if v <   2e9: return "Smallcap"
    if v <  10e9: return "Midcap"
    return "Largecap"

# ---------------------------
# Vy: Kontroll
# ---------------------------

def kontrollvy(df: pd.DataFrame) -> None:
    st.header("üß≠ Kontroll")

    # √Ñldst uppdaterade ‚Äì topp 20
    st.subheader("‚è±Ô∏è √Ñldst uppdaterade (alla sp√•rade f√§lt)")
    work = add_oldest_ts_col(df.copy())
    vis = work.sort_values(by=["_oldest_any_ts_fill","Bolagsnamn"]).head(20)
    cols_show = ["Ticker","Bolagsnamn"]
    for k in ["TS_Utest√•ende aktier","TS_P/S","TS_P/S Q1","TS_P/S Q2","TS_P/S Q3","TS_P/S Q4","TS_Oms√§ttning idag","TS_Oms√§ttning n√§sta √•r"]:
        if k in vis.columns: cols_show.append(k)
    cols_show.append("_oldest_any_ts")
    st.dataframe(vis[cols_show], use_container_width=True, hide_index=True)

    st.divider()

    # Kr√§ver manuell hantering?
    st.subheader("üõ†Ô∏è Kr√§ver manuell hantering")
    older_days = st.number_input("Flagga om √§ldsta TS √§r √§ldre √§n (dagar)", min_value=30, max_value=2000, value=365, step=30, key="kontroll_older_days")
    need = build_requires_manual_df(df, older_than_days=int(older_days))
    if need.empty:
        st.success("Inga uppenbara kandidater f√∂r manuell hantering just nu.")
    else:
        st.warning(f"{len(need)} bolag kan beh√∂va manuell hantering:")
        st.dataframe(need, use_container_width=True, hide_index=True)

    st.divider()

    # Batch-logg (om satt av sidopanelen)
    st.subheader("üìí Senaste batch-k√∂rlogg")
    log = st.session_state.get("batch_log")
    if not log:
        st.info("Ingen batch-k√∂rning i denna session √§nnu.")
    else:
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**√Ñndringar** (ticker ‚Üí f√§lt)")
            if log.get("changed"):
                st.json(log["changed"])
            else:
                st.write("‚Äì")
        with col2:
            st.markdown("**Missar** (ticker ‚Üí orsak)")
            if log.get("misses"):
                st.json(log["misses"])
            else:
                st.write("‚Äì")

# ---------------------------
# Vy: Analys
# ---------------------------

def analysvy(df: pd.DataFrame, user_rates: Dict[str,float]) -> None:
    st.header("üìà Analys")
    if df.empty:
        st.info("Inga bolag i databasen √§nnu.")
        return

    vis_df = df.sort_values(by=["Bolagsnamn","Ticker"]).reset_index(drop=True)
    etiketter = [f"{r['Bolagsnamn']} ({r['Ticker']})" for _, r in vis_df.iterrows()]

    if "analys_idx" not in st.session_state:
        st.session_state.analys_idx = 0
    st.session_state.analys_idx = st.number_input("Visa bolag #", min_value=0, max_value=max(0, len(etiketter)-1), value=st.session_state.analys_idx, step=1, key="analys_idx_num")
    st.selectbox("Eller v√§lj i lista", etiketter, index=st.session_state.analys_idx if etiketter else 0, key="analys_select")

    col_a, col_b = st.columns([1,1])
    with col_a:
        if st.button("‚¨ÖÔ∏è F√∂reg√•ende", key="analys_prev_btn"):
            st.session_state.analys_idx = max(0, st.session_state.analys_idx-1)
    with col_b:
        if st.button("‚û°Ô∏è N√§sta", key="analys_next_btn"):
            st.session_state.analys_idx = min(len(etiketter)-1, st.session_state.analys_idx+1)

    st.write(f"Post {st.session_state.analys_idx+1}/{len(etiketter)}")

    r = vis_df.iloc[st.session_state.analys_idx]
    st.subheader(f"{r['Bolagsnamn']} ({r['Ticker']})")

    # Etikett om senaste uppdateringstyp
    auto = str(r.get("Senast auto-uppdaterad","")).strip()
    manu = str(r.get("Senast manuellt uppdaterad","")).strip()
    src  = str(r.get("Senast uppdaterad k√§lla","")).strip()
    if auto or manu:
        lab = "Auto" if auto and (auto >= manu) else "Manuellt"
        tid = auto if lab=="Auto" else manu
        st.caption(f"Senast uppdaterad: **{lab}** ({tid}){f' ‚Äì {src}' if src else ''}")

    cols = [
        "Ticker","Bolagsnamn","Valuta","Aktuell kurs","Utest√•ende aktier","P/S","P/S Q1","P/S Q2","P/S Q3","P/S Q4",
        "P/S-snitt","Oms√§ttning idag","Oms√§ttning n√§sta √•r","Oms√§ttning om 2 √•r","Oms√§ttning om 3 √•r",
        "Riktkurs idag","Riktkurs om 1 √•r","Riktkurs om 2 √•r","Riktkurs om 3 √•r",
        "CAGR 5 √•r (%)","Antal aktier","√Örlig utdelning",
        "Senast manuellt uppdaterad","Senast auto-uppdaterad","Senast uppdaterad k√§lla",
        "TS_Utest√•ende aktier","TS_P/S","TS_P/S Q1","TS_P/S Q2","TS_P/S Q3","TS_P/S Q4","TS_Oms√§ttning idag","TS_Oms√§ttning n√§sta √•r"
    ]
    cols = [c for c in cols if c in df.columns]
    st.dataframe(pd.DataFrame([r[cols].to_dict()]), use_container_width=True, hide_index=True)

# ---------------------------
# Vy: L√§gg till / uppdatera
# ---------------------------

def lagg_till_eller_uppdatera(
    df: pd.DataFrame,
    user_rates: Dict[str,float],
    save_cb = None,        # valfri callback(df) -> None f√∂r att spara
) -> pd.DataFrame:
    st.header("‚ûï L√§gg till / uppdatera bolag")

    # Sorteringsval
    sort_val = st.selectbox("Sortera f√∂r redigering", ["A‚Äì√ñ (bolagsnamn)","√Ñldst uppdaterade f√∂rst (alla f√§lt)"], key="edit_sort")
    if sort_val.startswith("√Ñldst"):
        work = add_oldest_ts_col(df.copy())
        vis_df = work.sort_values(by=["_oldest_any_ts_fill","Bolagsnamn"])
    else:
        vis_df = df.sort_values(by=["Bolagsnamn","Ticker"])

    namn_map = {f"{r['Bolagsnamn']} ({r['Ticker']})": r['Ticker'] for _, r in vis_df.iterrows()}
    val_lista = [""] + list(namn_map.keys())
    if "edit_index" not in st.session_state: st.session_state.edit_index = 0

    valt_label = st.selectbox("V√§lj bolag (l√§mna tomt f√∂r nytt)", val_lista, index=min(st.session_state.edit_index, len(val_lista)-1))
    col_prev, col_pos, col_next = st.columns([1,2,1])
    with col_prev:
        if st.button("‚¨ÖÔ∏è F√∂reg√•ende", key="edit_prev"):
            st.session_state.edit_index = max(0, st.session_state.edit_index - 1)
    with col_pos:
        st.write(f"Post {st.session_state.edit_index}/{max(1, len(val_lista)-1)}")
    with col_next:
        if st.button("‚û°Ô∏è N√§sta", key="edit_next"):
            st.session_state.edit_index = min(len(val_lista)-1, st.session_state.edit_index + 1)

    if valt_label and valt_label in namn_map:
        bef_mask = (df["Ticker"].astype(str).str.upper() == namn_map[valt_label].upper())
        bef = df[bef_mask].iloc[0] if bef_mask.any() else pd.Series({}, dtype=object)
    else:
        bef = pd.Series({}, dtype=object)

    with st.form("form_bolag"):
        c1, c2 = st.columns(2)
        with c1:
            ticker = st.text_input("Ticker (Yahoo-format)", value=bef.get("Ticker","") if not bef.empty else "").upper()
            utest = st.number_input("Utest√•ende aktier (miljoner)", value=float(bef.get("Utest√•ende aktier",0.0)) if not bef.empty else 0.0)
            antal = st.number_input("Antal aktier du √§ger", value=float(bef.get("Antal aktier",0.0)) if not bef.empty else 0.0)
            gav_sek = st.number_input("GAV (SEK)", value=float(bef.get("GAV (SEK)",0.0)) if "GAV (SEK)" in df.columns and not bef.empty else 0.0)
            ps  = st.number_input("P/S",   value=float(bef.get("P/S",0.0)) if not bef.empty else 0.0)
            ps1 = st.number_input("P/S Q1", value=float(bef.get("P/S Q1",0.0)) if not bef.empty else 0.0)
            ps2 = st.number_input("P/S Q2", value=float(bef.get("P/S Q2",0.0)) if not bef.empty else 0.0)
            ps3 = st.number_input("P/S Q3", value=float(bef.get("P/S Q3",0.0)) if not bef.empty else 0.0)
            ps4 = st.number_input("P/S Q4", value=float(bef.get("P/S Q4",0.0)) if not bef.empty else 0.0)
        with c2:
            oms_idag  = st.number_input("Oms√§ttning idag (miljoner)",  value=float(bef.get("Oms√§ttning idag",0.0)) if not bef.empty else 0.0)
            oms_next  = st.number_input("Oms√§ttning n√§sta √•r (miljoner)", value=float(bef.get("Oms√§ttning n√§sta √•r",0.0)) if not bef.empty else 0.0)
            st.markdown("**Vid spara uppdateras ocks√• automatiskt (utan att skriva √∂ver manuella 0-v√§rden):**")
            st.write("- Riktkurser/ber√§kningar r√§knas om")

        spar = st.form_submit_button("üíæ Spara")

    # Spara
    if spar and ticker:
        # Dublettskydd (fall 1: ny)
        if ticker.upper() not in df["Ticker"].astype(str).str.upper().values:
            # ok
            pass
        else:
            # Fall 2: redigering av befintlig (ok), men blockera om anv√§ndaren av misstag byter till en ticker
            # som redan finns i en annan rad.
            exists_mask = (df["Ticker"].astype(str).str.upper() == ticker.upper())
            if bef.empty and exists_mask.any():
                st.error("Ticker finns redan ‚Äì inga dubbletter till√•tna.")
                return df

        ny = {
            "Ticker": ticker, "Utest√•ende aktier": utest, "Antal aktier": antal, "GAV (SEK)": gav_sek,
            "P/S": ps, "P/S Q1": ps1, "P/S Q2": ps2, "P/S Q3": ps3, "P/S Q4": ps4,
            "Oms√§ttning idag": oms_idag, "Oms√§ttning n√§sta √•r": oms_next
        }

        df2 = df.copy()
        if not bef.empty:
            for k,v in ny.items():
                if k in df2.columns:
                    df2.loc[df2["Ticker"].astype(str).str.upper()==ticker.upper(), k] = v
        else:
            # skapa tom rad
            tom = {c: (0.0 if c not in ["Ticker","Bolagsnamn","Valuta","Senast manuellt uppdaterad","Senast auto-uppdaterad","Senast uppdaterad k√§lla"] and not str(c).startswith("TS_") else "") for c in FINAL_COLS}
            for k,v in ny.items():
                tom[k] = v
            df2 = pd.concat([df2, pd.DataFrame([tom])], ignore_index=True)

        # st√§mpla manuell TS f√∂r f√§lt som √§ndrats
        ridx = df2.index[df2["Ticker"].astype(str).str.upper()==ticker.upper()][0]
        df2.at[ridx, "Senast manuellt uppdaterad"] = _now_stamp()
        for fld in ["P/S","P/S Q1","P/S Q2","P/S Q3","P/S Q4","Oms√§ttning idag","Oms√§ttning n√§sta √•r"]:
            if fld in TS_FIELDS and fld in ny:
                df2.at[ridx, TS_FIELDS[fld]] = _now_stamp()

        df2 = uppdatera_berakningar(df2, user_rates)
        if callable(save_cb):
            save_cb(df2)
            st.success("Sparat.")
        return df2

    # Enskilda uppdateringsknappar (f√∂r valt bolag)
    if not bef.empty:
        colu1, colu2 = st.columns([1,1])
        tick = bef.get("Ticker","")
        with colu1:
            if st.button("üíπ Uppdatera pris (Yahoo)", key="upd_price_btn"):
                try:
                    df2, changed, msg = run_update_price_only(df, tick, user_rates)
                    df2 = uppdatera_berakningar(df2, user_rates)
                    if callable(save_cb): save_cb(df2)
                    st.success(f"{tick}: {msg}. √Ñndrade f√§lt: {changed or 'Inga'}")
                    return df2
                except Exception as e:
                    st.error(f"{tick}: Fel: {e}")
        with colu2:
            if st.button("üîÑ Full uppdatering (Yahoo)", key="upd_full_btn"):
                try:
                    df2, changed, msg = run_update_full(df, tick, user_rates)
                    df2 = uppdatera_berakningar(df2, user_rates)
                    if callable(save_cb): save_cb(df2)
                    st.success(f"{tick}: {msg}. √Ñndrade f√§lt: {changed or 'Inga'}")
                    return df2
                except Exception as e:
                    st.error(f"{tick}: Fel: {e}")

    st.divider()
    st.subheader("üìù Manuell prognoslista (√§ldre Oms√§ttning TS f√∂rst)")
    vis = _manual_forecast_list(df, top_n=25)
    if vis.empty:
        st.info("Alla 'Oms√§ttning idag/n√§sta √•r' har aktuella datumst√§mplar.")
    else:
        st.dataframe(vis, use_container_width=True, hide_index=True)

    return df

# ---------------------------
# Vy: Investeringsf√∂rslag
# ---------------------------

def visa_investeringsforslag(df: pd.DataFrame, user_rates: Dict[str,float]) -> None:
    st.header("üí° Investeringsf√∂rslag")

    # Val f√∂r typ: tillv√§xt / utdelning
    mode = st.radio("Fokus", ["Tillv√§xt", "Utdelning"], horizontal=True, key="inv_mode")
    mode_key = "dividend" if mode == "Utdelning" else "growth"

    # Filtrera p√• kap-segment & sektor
    cap_filter = st.selectbox("Filter: b√∂rsv√§rde", ["Alla","Microcap","Smallcap","Midcap","Largecap"], index=0, key="inv_cap")
    sector_filter = st.text_input("Filtrera p√• sektor (frivilligt, case-insensitive delstr√§ng)", value="", key="inv_sector")

    # F√∂rbered data
    base = df.copy()
    # Market cap (om ej kolumn finns ‚Äì f√∂rs√∂k h√§rleda via kurs*aktier)
    if "MarketCap" not in base.columns:
        base["MarketCap"] = 0.0
    px = base.get("Aktuell kurs", 0.0).astype(float)
    sh_m = base.get("Utest√•ende aktier", 0.0).astype(float) # i miljoner
    # approximera mcap i prisets valuta
    base["MarketCap"] = np.where((px>0) & (sh_m>0), px * (sh_m*1e6), base["MarketCap"].astype(float))

    # Risklabel
    base["Risklabel"] = base["MarketCap"].apply(_risk_label)

    # P/S-snitt s√§kras
    if "P/S-snitt" not in base.columns:
        base["P/S-snitt"] = 0.0
    # Potential (%) mot "Riktkurs om 1 √•r" om finns
    if "Riktkurs om 1 √•r" in base.columns:
        base["Potential (%)"] = np.where(
            (base["Aktuell kurs"]>0) & (base["Riktkurs om 1 √•r"]>0),
            (base["Riktkurs om 1 √•r"] - base["Aktuell kurs"]) / base["Aktuell kurs"] * 100.0,
            0.0
        )
    else:
        base["Potential (%)"] = 0.0

    # Filter kap
    if cap_filter != "Alla":
        base = base[base["Risklabel"] == cap_filter].copy()

    # Filter sektor
    if sector_filter.strip():
        col = "Sektor" if "Sektor" in base.columns else "Sector"
        if col in base.columns:
            base = base[base[col].astype(str).str.lower().str.contains(sector_filter.strip().lower())].copy()

    # Growth vs Dividend logik (enkel selektion)
    if mode_key == "dividend":
        # beh√•ll bolag med positiv √•rlig utdelning
        base = base[base.get("√Örlig utdelning", 0.0).astype(float) > 0.0].copy()
    # Rankning
    if base.empty:
        st.info("Inga bolag matchar filtren.")
        return

    ranked = rank_candidates(base, mode=mode_key).reset_index(drop=True)

    # UI: v√§lj riktkurs att j√§mf√∂ra
    riktkurs_val = st.selectbox(
        "J√§mf√∂r mot riktkurs",
        ["Riktkurs om 1 √•r","Riktkurs idag","Riktkurs om 2 √•r","Riktkurs om 3 √•r"],
        index=0,
        key="inv_rk"
    )

    # Visa topp 20 med expander
    show = ranked.head(20).copy()
    for i, r in show.iterrows():
        lbl = f"{r.get('Bolagsnamn','')} ({r.get('Ticker','')})"
        with st.expander(f"{i+1}. {lbl}  ‚Äî  Score: {round(r.get('_score',0.0),2)}"):
            valuta = r.get("Valuta","")
            st.markdown(
                f"- **Aktuell kurs:** {round(float(r.get('Aktuell kurs',0.0)),2)} {valuta}\n"
                f"- **Market Cap:** { _format_mcap(r.get('MarketCap',0.0)) } {valuta}\n"
                f"- **P/S (TTM):** {round(float(r.get('P/S',0.0)),2)}\n"
                f"- **P/S-snitt (Q1‚ÄìQ4):** {round(float(r.get('P/S-snitt',0.0)),2)}\n"
                f"- **Riktkurs (val):** {round(float(r.get(riktkurs_val,0.0)),2)} {valuta}\n"
                f"- **Uppsida mot riktkurs:** {round(float(r.get('Potential (%)',0.0)),2)} %\n"
                f"- **Risklabel:** {r.get('Risklabel','')}\n"
            )
            # historisk P/S
            ps_hist = []
            for q in ["P/S Q1","P/S Q2","P/S Q3","P/S Q4"]:
                if q in r and float(r.get(q,0.0))>0:
                    ps_hist.append(f"{q.split()[-1]}: {round(float(r[q]),2)}")
            if ps_hist:
                st.caption("Historik P/S: " + " | ".join(ps_hist))

            # ev. badges/kommentar
            try:
                badges = format_investment_badges(r)
                if badges:
                    st.markdown(badges)
            except Exception:
                pass

# ---------------------------
# Vy: Portf√∂lj
# ---------------------------

def visa_portfolj(df: pd.DataFrame, user_rates: Dict[str,float]) -> None:
    st.header("üì¶ Min portf√∂lj")
    port = df[df.get("Antal aktier",0) > 0].copy()
    if port.empty:
        st.info("Du √§ger inga aktier.")
        return

    # V√§xelkurs -> SEK
    port["V√§xelkurs"] = port["Valuta"].apply(lambda v: hamta_valutakurs(v, user_rates))
    port["V√§rde (SEK)"] = port["Antal aktier"].astype(float) * port["Aktuell kurs"].astype(float) * port["V√§xelkurs"].astype(float)
    total_v√§rde = float(port["V√§rde (SEK)"].sum())
    port["Andel (%)"] = np.where(total_v√§rde>0, (port["V√§rde (SEK)"] / total_v√§rde * 100.0), 0.0).round(2)
    port["Total √•rlig utdelning (SEK)"] = (port["Antal aktier"].astype(float) * port["√Örlig utdelning"].astype(float) * port["V√§xelkurs"].astype(float))
    tot_utd = float(port["Total √•rlig utdelning (SEK)"].sum())

    st.markdown(f"**Totalt portf√∂ljv√§rde:** {round(total_v√§rde,2)} SEK")
    st.markdown(f"**Total √•rlig utdelning:** {round(tot_utd,2)} SEK")
    st.markdown(f"**Ungef√§rlig m√•nadsutdelning:** {round(tot_utd/12.0,2)} SEK")

    show_cols = ["Ticker","Bolagsnamn","Antal aktier","Aktuell kurs","Valuta","V√§rde (SEK)","Andel (%)","√Örlig utdelning","Total √•rlig utdelning (SEK)"]
    show_cols = [c for c in show_cols if c in port.columns]
    st.dataframe(port[show_cols].sort_values(by="V√§rde (SEK)", ascending=False), use_container_width=True, hide_index=True)
